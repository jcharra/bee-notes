{"version":3,"file":"src_app_pages_excolonies_excolonies_module_ts.c525d655207ee572.js","mappings":"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","names":["i0","ctx_r9","oxw","ctx_r11","routes","path","component","constructor","swarmService","router","alertCtrl","translate","purchaseService","this","ionViewDidEnter","getFormerSwarms","pipe","first","subscribe","colonies","reactivate","s","getSwarms","swarms","__awaiter","checkLimitReached","length","create","header","instant","message","buttons","text","cssClass","present","role","handler","_onReactivate","navigateByUrl","viewJournal","id","ExcoloniesPage","selectors","ExcoloniesPageRoutingModule","RouterModule","ExcoloniesPageModule","CommonModule","FormsModule","IonicModule","TranslateModule","ActivityStatus","SwarmService","db","authService","storageSync","ignoreStatuses","getUser","switchMap","user","console","log","uid","from","getFromStorage","LocalStorageKey","localResult","of","take","map","Object","created","Date","filter","indexOf","activityStatus","listVal","ref","keyField","swarmData","i","item","push","writeSwarmsToStorage","getSwarm","swarmId","localSwarms","swarmForId","objectVal","name","ancestorId","isNucleus","about","createSwarm","_markStorageAsDirty","swarm","toISOString","then","res","pathParts","_path","pieces_","updateSwarm","update","markAsDeceased","deactivate","markAsSold","markAsDissolved","status","writeToStorage","date","d","clearStorage","factory"],"sourceRoot":"webpack:///","sources":["./src/app/pages/excolonies/excolonies.page.html","./src/app/pages/excolonies/excolonies-routing.module.ts","./src/app/pages/excolonies/excolonies.page.ts","./src/app/pages/excolonies/excolonies.module.ts","./src/app/types/Swarm.ts","./src/app/services/swarm.service.ts"],"sourcesContent":["<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"end\">\n      <ion-menu-button menu=\"first\"></ion-menu-button>\n    </ion-buttons>\n    <ion-title> {{ \"FORMER_COLONIES_PAGE.pageTitle\" | translate }} </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list [inset]=\"true\" *ngIf=\"colonies\">\n    <ng-container *ngIf=\"colonies.length > 0; else noFormerColonies\">\n      <ion-item *ngFor=\"let colony of colonies\">\n        <ion-icon\n          *ngIf=\"colony.activityStatus === 'DISSOLVED'\"\n          class=\"statusHint\"\n          slot=\"start\"\n          name=\"exit\"\n        ></ion-icon>\n        <ion-icon\n          *ngIf=\"colony.activityStatus === 'DECEASED'\"\n          class=\"statusHint\"\n          slot=\"start\"\n          name=\"heart-dislike\"\n        ></ion-icon>\n        <ion-icon\n          *ngIf=\"colony.activityStatus === 'SOLD'\"\n          class=\"statusHint\"\n          slot=\"start\"\n          name=\"cash\"\n        ></ion-icon>\n        <ion-label slot=\"start\">{{ colony.name }}</ion-label>\n        <ion-buttons slot=\"end\">\n          <ion-button (click)=\"viewJournal(colony)\">\n            <ion-icon name=\"book-outline\"></ion-icon>\n          </ion-button>\n          <ion-button (click)=\"reactivate(colony)\" color=\"success\">\n            <ion-icon name=\"fitness-outline\"></ion-icon>\n          </ion-button>\n        </ion-buttons>\n      </ion-item>\n    </ng-container>\n\n    <ng-template #noFormerColonies>\n      <ion-item>\n        <ion-label class=\"ion-text-wrap\"\n          >{{ \"FORMER_COLONIES_PAGE.noColonies\" | translate}}</ion-label\n        >\n      </ion-item>\n    </ng-template>\n  </ion-list>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ExcoloniesPage } from './excolonies.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ExcoloniesPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ExcoloniesPageRoutingModule {}\n","import { Component } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { AlertController } from \"@ionic/angular\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { first } from \"rxjs/operators\";\nimport { PurchaseService } from \"src/app/services/purchase.service\";\nimport { Swarm } from \"src/app/types/Swarm\";\nimport { SwarmService } from \"../../services/swarm.service\";\n\n@Component({\n  selector: \"app-excolonies\",\n  templateUrl: \"./excolonies.page.html\",\n  styleUrls: [\"./excolonies.page.scss\"],\n})\nexport class ExcoloniesPage {\n  colonies: Swarm[];\n  constructor(\n    private swarmService: SwarmService,\n    private router: Router,\n    private alertCtrl: AlertController,\n    private translate: TranslateService,\n    private purchaseService: PurchaseService\n  ) {}\n\n  ionViewDidEnter() {\n    this.swarmService\n      .getFormerSwarms()\n      .pipe(first())\n      .subscribe((colonies: Swarm[]) => {\n        this.colonies = colonies;\n      });\n  }\n\n  reactivate(s: Swarm) {\n    this.swarmService\n      .getSwarms()\n      .pipe(first())\n      .subscribe(async (swarms: Swarm[]) => {\n        if (\n          this.purchaseService.checkLimitReached(swarms ? swarms.length : 0)\n        ) {\n          const alert = await this.alertCtrl.create({\n            header: this.translate.instant(\n              \"COLONIES_PAGE.fullVersionRequiredDialogHeader\"\n            ),\n            message: this.translate.instant(\n              \"COLONIES_PAGE.fullVersionRequiredDialogText\"\n            ),\n            buttons: [\n              {\n                text: this.translate.instant(\"GENERAL.ok\"),\n                cssClass: \"secondary\",\n              },\n            ],\n          });\n\n          await alert.present();\n        } else {\n          const alert = await this.alertCtrl.create({\n            header: this.translate.instant(\n              \"FORMER_COLONIES_PAGE.reactivationHint\"\n            ),\n            buttons: [\n              {\n                text: this.translate.instant(\"GENERAL.cancel\"),\n                role: \"cancel\",\n                cssClass: \"secondary\",\n              },\n              {\n                text: this.translate.instant(\"GENERAL.yes\"),\n                handler: () => this._onReactivate(s),\n              },\n            ],\n          });\n\n          await alert.present();\n        }\n      });\n  }\n\n  private _onReactivate(s: Swarm) {\n    this.swarmService\n      .reactivate(s)\n      .pipe(first())\n      .subscribe(() => {\n        this.router.navigateByUrl(\"/\");\n      });\n  }\n\n  viewJournal(s: Swarm) {\n    this.router.navigateByUrl(`/swarms/view/${s.id}/journal?readonly=1`);\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { ExcoloniesPageRoutingModule } from \"./excolonies-routing.module\";\n\nimport { ExcoloniesPage } from \"./excolonies.page\";\nimport { TranslateModule } from \"@ngx-translate/core\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ExcoloniesPageRoutingModule,\n    TranslateModule,\n  ],\n  declarations: [ExcoloniesPage],\n})\nexport class ExcoloniesPageModule {}\n","import { ColonyStatusInfo } from \"./ColonyStatus\";\nimport { JournalEntry } from \"./JournalEntry\";\n\nexport enum ActivityStatus {\n  ACTIVE = \"ACTIVE\",\n  DECEASED = \"DECEASED\",\n  SOLD = \"SOLD\",\n  DISSOLVED = \"DISSOLVED\",\n}\n\nexport interface Swarm {\n  id?: string;\n  name: string;\n  created: Date;\n  statusInfo?: ColonyStatusInfo;\n  lastAction?: JournalEntry;\n  activityStatus?: ActivityStatus;\n  ancestorId?: string; // id of ancestor\n  isNucleus?: boolean;\n  about?: string;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Database, listVal, objectVal } from \"@angular/fire/database\";\nimport { push, ref, update } from \"firebase/database\";\nimport { from, Observable, of } from \"rxjs\";\nimport { map, switchMap, take } from \"rxjs/operators\";\nimport { AuthService } from \"../pages/auth/auth.service\";\nimport { ActivityStatus, Swarm } from \"../types/Swarm\";\nimport { LocalStorageKey, StorageSyncService } from \"./storage-sync.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SwarmService {\n  constructor(private db: Database, private authService: AuthService, private storageSync: StorageSyncService) {}\n\n  getSwarms(\n    ignoreStatuses: ActivityStatus[] = [ActivityStatus.SOLD, ActivityStatus.DECEASED, ActivityStatus.DISSOLVED]\n  ) {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        console.log(\"User\", user.uid);\n        return from(this.storageSync.getFromStorage(LocalStorageKey.SWARMS)).pipe(\n          switchMap((localResult) => {\n            if (localResult) {\n              return of(localResult).pipe(\n                take(1),\n                map((swarms: Swarm[]) => {\n                  return swarms\n                    .map((s) => {\n                      return { ...s, created: new Date(s.created) };\n                    })\n                    .filter((s) => ignoreStatuses.indexOf(s.activityStatus) === -1);\n                })\n              );\n            } else {\n              return listVal(ref(this.db, `users/${user.uid}/swarms`), {\n                keyField: \"id\",\n              }).pipe(\n                take(1),\n                map((swarmData: any[]) => {\n                  const swarms: Swarm[] = [];\n\n                  for (let i = 0; i < swarmData.length; i++) {\n                    const item: any = swarmData[i];\n\n                    swarms.push({\n                      ...item,\n                      created: new Date(item.created),\n                    });\n                  }\n\n                  this.writeSwarmsToStorage(swarms);\n\n                  return swarms.filter((s) => ignoreStatuses.indexOf(s.activityStatus) === -1);\n                })\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  getSwarm(swarmId: string): Observable<Swarm> {\n    return from(this.storageSync.getFromStorage(LocalStorageKey.SWARMS)).pipe(\n      switchMap((localSwarms) => {\n        const swarmForId = localSwarms ? localSwarms.filter((s) => s.id === swarmId)[0] : null;\n        if (swarmForId) {\n          return of(swarmForId);\n        } else {\n          return this.authService.getUser().pipe(\n            switchMap((user) => {\n              return objectVal(ref(this.db, `users/${user.uid}/swarms/${swarmId}`), {\n                keyField: \"id\",\n              }).pipe(\n                take(1),\n                map((s: any) => {\n                  return {\n                    id: swarmId,\n                    name: s.name,\n                    created: new Date(s.created),\n                    activityStatus: s.activityStatus,\n                    ancestorId: s.ancestorId,\n                    isNucleus: s.isNucleus,\n                    about: s.about,\n                  };\n                })\n              );\n            })\n          );\n        }\n      })\n    );\n  }\n\n  createSwarm(\n    name: string,\n    ancestorId: string = null,\n    isNucleus: boolean = false,\n    about: string = \"\"\n  ): Observable<any> {\n    return this.authService.getUser().pipe(\n      switchMap(async (user) => {\n        await this._markStorageAsDirty();\n\n        const swarm = {\n          name,\n          created: new Date().toISOString(),\n          activityStatus: ActivityStatus.ACTIVE,\n          ancestorId,\n          isNucleus,\n          about,\n        };\n\n        return push(ref(this.db, `/users/${user.uid}/swarms`), swarm).then((res: any) => {\n          const pathParts = res._path.pieces_;\n          return pathParts[pathParts.length - 1];\n        });\n      })\n    );\n  }\n\n  updateSwarm(s: Swarm) {\n    return this.authService.getUser().pipe(\n      map(async (user) => {\n        await this._markStorageAsDirty();\n        update(ref(this.db, `/users/${user.uid}/swarms/${s.id}`), s);\n      })\n    );\n  }\n\n  markAsDeceased(s: Swarm): Observable<any> {\n    return this.deactivate(s, ActivityStatus.DECEASED);\n  }\n\n  markAsSold(s: Swarm) {\n    return this.deactivate(s, ActivityStatus.SOLD);\n  }\n\n  markAsDissolved(s: Swarm) {\n    return this.deactivate(s, ActivityStatus.DISSOLVED);\n  }\n\n  getFormerSwarms(): Observable<Swarm[]> {\n    return this.getSwarms([ActivityStatus.ACTIVE]);\n  }\n\n  reactivate(s: Swarm) {\n    return this.authService.getUser().pipe(\n      switchMap(async (user) => {\n        await this._markStorageAsDirty();\n        return update(ref(this.db, `/users/${user.uid}/swarms/${s.id}`), {\n          activityStatus: ActivityStatus.ACTIVE,\n        });\n      })\n    );\n  }\n\n  private deactivate(s: Swarm, status: ActivityStatus) {\n    return this.authService.getUser().pipe(\n      switchMap(async (user) => {\n        await this._markStorageAsDirty();\n        return update(ref(this.db, `/users/${user.uid}/swarms/${s.id}`), {\n          activityStatus: status,\n        });\n      })\n    );\n  }\n\n  private writeSwarmsToStorage(swarms: Swarm[]) {\n    this.storageSync.writeToStorage(\n      LocalStorageKey.SWARMS,\n      swarms.map((s) => {\n        let date = null;\n        try {\n          date = new Date(s.created).toISOString();\n        } catch {}\n\n        return { ...s, created: date };\n      })\n    );\n  }\n\n  private _markStorageAsDirty(): Promise<any> {\n    return this.storageSync.clearStorage();\n  }\n}\n"]}