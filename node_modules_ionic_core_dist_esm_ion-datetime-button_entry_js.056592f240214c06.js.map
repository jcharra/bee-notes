{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-datetime-button_entry_js.056592f240214c06.js","mappings":"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","names":["DatetimeButton","constructor","hostRef","registerInstance","this","datetimeEl","overlayEl","datetimePresentation","datetimeActive","color","disabled","setDateTimeText","value","locale","hourCycle","preferWheel","multiple","printIonWarning","el","parsedDatetime","parseDate","getToday","use24Hour","is24Hour","tzOffset","undefined","dateText","timeText","getMonthDayAndYear","getLocalizedTime","getMonthAndYear","getLocalizedDateTime","month","year","waitForDatetimeChanges","p","o","Promise","resolve","addEventListener","once","handleDateClick","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","handleTimeClick","timeTargetEl","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","componentWillLoad","datetime","s","printIonError","document","getElementById","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","componentOnReady","render","mode","getIonMode","h","Host","class","createColorClasses","id","onClick","part","ref","name","getElement","style","ios","md","mdDatetimeButtonCss"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement } from './index-1a99aeb7.js';\nimport { b as getIonMode } from './ionic-global-04e268e7.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-2914b3be.js';\nimport { p as printIonWarning, b as printIonError } from './index-c4b11676.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\nimport { p as parseDate, f as getToday, G as is24Hour, P as getLocalizedDateTime, D as getMonthAndYear, H as getLocalizedTime, Q as getMonthDayAndYear } from './parse-1c2207b2.js';\n\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst DatetimeButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    this.datetimePresentation = 'date-time';\n    this.datetimeActive = false;\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, the user cannot interact with the button.\n     */\n    this.disabled = false;\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n    this.setDateTimeText = () => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      const { value, locale, hourCycle, preferWheel, multiple } = datetimeEl;\n      if (multiple) {\n        printIonWarning(`Multi-date selection cannot be used with ion-datetime-button.\n\nPlease upvote https://github.com/ionic-team/ionic-framework/issues/25668 if you are interested in seeing this functionality added.\n      `, this.el);\n        return;\n      }\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n      const parsedDatetime = parseDate(value || getToday());\n      const use24Hour = is24Hour(locale, hourCycle);\n      // TODO(FW-1865) - Remove once FW-1831 is fixed.\n      parsedDatetime.tzOffset = undefined;\n      this.dateText = this.timeText = undefined;\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getMonthDayAndYear(locale, parsedDatetime);\n          const timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          }\n          else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n          break;\n        case 'date':\n          this.dateText = getMonthDayAndYear(locale, parsedDatetime);\n          break;\n        case 'time':\n          this.timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n          break;\n        case 'month-year':\n          this.dateText = getMonthAndYear(locale, parsedDatetime);\n          break;\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, { month: 'long' });\n          break;\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, { year: 'numeric' });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n    this.waitForDatetimeChanges = async () => {\n      const { datetimeEl } = this;\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n        addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n      });\n    };\n    this.handleDateClick = async (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the date button,\n       * we need to make sure that only a date\n       * picker is displayed. For presentation styles\n       * that display content other than a date picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'date';\n          /**\n           * The date+time wheel picker\n           * shows date and time together,\n           * so do not adjust the presentation\n           * in that case.\n           */\n          if (!datetimeEl.preferWheel && needsChange) {\n            datetimeEl.presentation = 'date';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'date';\n      this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n    };\n    this.handleTimeClick = (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n    this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n      const { overlayEl } = this;\n      if (!overlayEl) {\n        return;\n      }\n      if (overlayEl.tagName === 'ION-POPOVER') {\n        /**\n         * When the presentation on datetime changes,\n         * we need to wait for the component to re-render\n         * otherwise the computed width/height of the\n         * popover content will be wrong, causing\n         * the popover to not align with the trigger element.\n         */\n        if (needsPresentationChange) {\n          await this.waitForDatetimeChanges();\n        }\n        /**\n         * We pass the trigger button element\n         * so that the popover aligns with the individual\n         * button that was clicked, not the component container.\n         */\n        overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n            ionShadowTarget: triggerEl,\n          } }));\n      }\n      else {\n        overlayEl.present();\n      }\n    };\n  }\n  async componentWillLoad() {\n    const { datetime } = this;\n    if (!datetime) {\n      printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n      return;\n    }\n    const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n    if (!datetimeEl) {\n      printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n      return;\n    }\n    /**\n     * Since the datetime can be used in any context (overlays, accordion, etc)\n     * we track when it is visible to determine when it is active.\n     * This informs which button is highlighted as well as the\n     * aria-expanded state.\n     */\n    const io = new IntersectionObserver((entries) => {\n      const ev = entries[0];\n      this.datetimeActive = ev.isIntersecting;\n    }, {\n      threshold: 0.01,\n    });\n    io.observe(datetimeEl);\n    /**\n     * Get a reference to any modal/popover\n     * the datetime is being used in so we can\n     * correctly size it when it is presented.\n     */\n    const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n    /**\n     * The .ion-datetime-button-overlay class contains\n     * styles that allow any modal/popover to be\n     * sized according to the dimensions of the datetime.\n     * If developers want a smaller/larger overlay all they need\n     * to do is change the width/height of the datetime.\n     * Additionally, this lets us avoid having to set\n     * explicit widths on each variant of datetime.\n     */\n    if (overlayEl) {\n      overlayEl.classList.add('ion-datetime-button-overlay');\n    }\n    componentOnReady(datetimeEl, () => {\n      const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n      /**\n       * Set the initial display\n       * in the rendered buttons.\n       *\n       * From there, we need to listen\n       * for ionChange to be emitted\n       * from datetime so we know when\n       * to re-render the displayed\n       * text in the buttons.\n       */\n      this.setDateTimeText();\n      addEventListener(datetimeEl, 'ionChange', this.setDateTimeText);\n      /**\n       * Configure the initial selected button\n       * in the event that the datetime is displayed\n       * without clicking one of the datetime buttons.\n       * For example, a datetime could be expanded\n       * in an accordion. In this case users only\n       * need to click the accordion header to show\n       * the datetime.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'date':\n        case 'month-year':\n        case 'month':\n        case 'year':\n          this.selectedButton = 'date';\n          break;\n        case 'time-date':\n        case 'time':\n          this.selectedButton = 'time';\n          break;\n      }\n    });\n  }\n  render() {\n    const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled,\n      }) }, dateText && (h(\"button\", { class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null))), timeText && (h(\"button\", { class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)))));\n  }\n  get el() { return getElement(this); }\n};\nDatetimeButton.style = {\n  ios: iosDatetimeButtonCss,\n  md: mdDatetimeButtonCss\n};\n\nexport { DatetimeButton as ion_datetime_button };\n"]}