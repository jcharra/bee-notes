{"version":3,"file":"src_app_pages_auth_auth_module_ts.294385621c3dcca6.js","mappings":"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","names":["i0","ctx_r5","oxw","routes","path","component","constructor","authService","router","loadingCtrl","alertController","translate","this","ngOnInit","loginForm","FormGroup","email","FormControl","Validators","password","Storage","key","then","data","value","get","setValue","onLogin","valid","isLoading","create","keyboardClose","message","instant","isSignup","loadingEl","present","signup","dismiss","onSignupSuccess","catch","err","onSignupFailed","login","navigateByUrl","onLoginFailed","resetPassword","address","controls","trim","length","indexOf","header","buttons","text","role","cssClass","handler","onResetLinkSent","onResetLinkFailure","onMailAddressIncomplete","msg","AuthPage","selectors","ctx","AuthPageRoutingModule","RouterModule","AuthPageModule","CommonModule","ReactiveFormsModule","IonicModule","TranslateModule"],"sourceRoot":"webpack:///","sources":["./src/app/pages/auth/auth.page.html","./src/app/pages/auth/auth-routing.module.ts","./src/app/pages/auth/auth.page.ts","./src/app/pages/auth/auth.module.ts"],"sourcesContent":["<ion-content>\n  <ion-card class=\"login-card\">\n    <ion-card-header>\n      <ion-card-subtitle>{{\"AUTH_PAGE.welcome\" | translate}} üêù</ion-card-subtitle>\n      <ion-card-title color=\"primary\"\n        >{{ (isSignup ? 'AUTH_PAGE.signup' : 'AUTH_PAGE.login') | translate}}</ion-card-title\n      >\n    </ion-card-header>\n\n    <form [formGroup]=\"loginForm\">\n      <ion-grid>\n        <ion-row>\n          <ion-col>\n            <ion-list>\n              <ion-item>\n                <ion-label mode=\"ios\" position=\"stacked\">{{ \"AUTH_PAGE.email\" | translate}}</ion-label>\n                <ion-input\n                  data-test-id=\"email\"\n                  formControlName=\"email\"\n                  type=\"email\"\n                  placeholder=\"{{ 'AUTH_PAGE.emailPlaceholder' | translate }}\"\n                ></ion-input>\n              </ion-item>\n              <ion-item>\n                <ion-label mode=\"ios\" position=\"stacked\">{{\"AUTH_PAGE.password\" | translate}}</ion-label>\n                <ion-input\n                  data-test-id=\"password\"\n                  formControlName=\"password\"\n                  type=\"password\"\n                  placeholder=\"{{'AUTH_PAGE.passwordPlaceholder' | translate}}\"\n                ></ion-input>\n              </ion-item>\n            </ion-list>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col>\n            <ion-button type=\"submit\" data-test-id=\"submit\" color=\"primary\" expand=\"block\" (click)=\"onLogin()\">\n              {{ (isSignup ? 'AUTH_PAGE.signup' : 'AUTH_PAGE.login') | translate}}</ion-button\n            >\n\n            <ng-container *ngIf=\"!isSignup\">\n              <ion-label color=\"secondary\" class=\"ion-float-left ion-padding\" (click)=\"isSignup = !isSignup\">\n                {{'AUTH_PAGE.signup' | translate}}\n              </ion-label>\n              <ion-label color=\"secondary\" class=\"ion-float-right ion-padding\" (click)=\"resetPassword()\">\n                {{ 'AUTH_PAGE.passwordReset' | translate}}\n              </ion-label>\n            </ng-container>\n\n            <ion-label\n              *ngIf=\"isSignup\"\n              color=\"secondary\"\n              class=\"ion-float-left ion-padding\"\n              (click)=\"isSignup = !isSignup\"\n            >\n              <ion-icon name=\"arrow-undo-outline\"></ion-icon>\n              {{\"AUTH_PAGE.backToLogin\" | translate}}\n            </ion-label>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </form>\n  </ion-card>\n  <ion-card *ngIf=\"isSignup\" class=\"login-card\">\n    <ion-card-content [innerHTML]=\"'AUTH_PAGE.beeNotesDescription' | translate\"></ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthPage } from './auth.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthPageRoutingModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { Storage } from \"@capacitor/storage\";\nimport { AlertController, LoadingController } from \"@ionic/angular\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { AuthService } from \"./auth.service\";\n\n@Component({\n  selector: \"app-auth\",\n  templateUrl: \"./auth.page.html\",\n  styleUrls: [\"./auth.page.scss\"],\n})\nexport class AuthPage implements OnInit {\n  isSignup = false;\n  isLoading = false;\n  loginForm: FormGroup;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private loadingCtrl: LoadingController,\n    private alertController: AlertController,\n    private translate: TranslateService\n  ) {}\n\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\n      password: new FormControl(\"\", [Validators.required]),\n    });\n\n    // Prepopulate email field if possible\n    Storage.get({ key: \"lastEmailAddress\" }).then((data: any) => {\n      if (data && data.value) {\n        this.loginForm.get(\"email\").setValue(data.value);\n      }\n    });\n  }\n\n  onLogin() {\n    if (!this.loginForm.valid) {\n      return;\n    }\n\n    Storage.set({\n      key: \"lastEmailAddress\",\n      value: this.loginForm.value.email,\n    });\n\n    this.isLoading = true;\n    this.loadingCtrl\n      .create({\n        keyboardClose: true,\n        message: this.translate.instant(\n          this.isSignup ? \"AUTH_PAGE.signupSpinner\" : \"AUTH_PAGE.loginSpinner\"\n        ),\n      })\n      .then((loadingEl) => {\n        loadingEl.present();\n\n        const email = this.loginForm.value.email;\n        const password = this.loginForm.value.password;\n\n        if (this.isSignup) {\n          this.authService\n            .signup(email, password)\n            .then(() => {\n              loadingEl.dismiss();\n              this.onSignupSuccess();\n              this.isSignup = false;\n            })\n            .catch((err) => {\n              loadingEl.dismiss();\n              this.onSignupFailed(err);\n            });\n        } else {\n          this.authService\n            .login(email, password)\n            .then(() => {\n              loadingEl.dismiss();\n              this.router.navigateByUrl(\"/swarms\");\n            })\n            .catch((err) => {\n              this.isLoading = false;\n              loadingEl.dismiss();\n              this.onLoginFailed(err);\n            });\n        }\n      });\n  }\n\n  async resetPassword() {\n    const address = this.loginForm.controls.email.value.trim();\n\n    const mailAddressComplete = address.length > 4 && address.indexOf(\"@\") > 0;\n    if (!mailAddressComplete) {\n      this.onMailAddressIncomplete();\n      return;\n    }\n\n    const alert = await this.alertController.create({\n      header: this.translate.instant(\"AUTH_PAGE.passwordReset\"),\n      message: this.translate.instant(\"AUTH_PAGE.passwordResetPrompt\", {\n        address: address,\n      }),\n      buttons: [\n        {\n          text: this.translate.instant(\"GENERAL.cancel\"),\n          role: \"cancel\",\n          cssClass: \"secondary\",\n        },\n        {\n          text: this.translate.instant(\"GENERAL.yes\"),\n          cssClass: \"secondary\",\n          handler: () => {\n            this.authService\n              .resetPassword(address)\n              .then(() => {\n                this.onResetLinkSent();\n              })\n              .catch((err) => {\n                this.onResetLinkFailure(err);\n              });\n          },\n        },\n      ],\n    });\n\n    await alert.present();\n  }\n\n  async onLoginFailed(msg: string = null) {\n    const alert = await this.alertController.create({\n      header: this.translate.instant(\"AUTH_PAGE.loginFailed\"),\n      message: msg || this.translate.instant(\"AUTH_PAGE.credentialsFailed\"),\n      buttons: [\"OK\"],\n    });\n\n    await alert.present();\n  }\n\n  async onSignupFailed(msg: string) {\n    const alert = await this.alertController.create({\n      header: this.translate.instant(\"AUTH_PAGE.signupFailed\"),\n      message: msg,\n      buttons: [\"OK\"],\n    });\n\n    await alert.present();\n  }\n\n  async onSignupSuccess() {\n    const alert = await this.alertController.create({\n      header: this.translate.instant(\"AUTH_PAGE.signupSuccess\"),\n      message: this.translate.instant(\"AUTH_PAGE.signupSuccessText\"),\n      buttons: [\"OK\"],\n    });\n\n    await alert.present();\n  }\n\n  async onMailAddressIncomplete() {\n    const alert = await this.alertController.create({\n      header: this.translate.instant(\"AUTH_PAGE.noEmailAddress\"),\n      message: this.translate.instant(\"AUTH_PAGE.noEmailAddressText\"),\n      buttons: [\"OK\"],\n    });\n\n    await alert.present();\n  }\n\n  async onResetLinkSent() {\n    const alert = await this.alertController.create({\n      header: this.translate.instant(\"AUTH_PAGE.resetLinkSent\"),\n      message: this.translate.instant(\"AUTH_PAGE.resetLinkSentText\"),\n      buttons: [\"OK\"],\n    });\n\n    await alert.present();\n  }\n\n  async onResetLinkFailure(msg: string) {\n    const alert = await this.alertController.create({\n      header: this.translate.instant(\"AUTH_PAGE.resetLinkFailure\"),\n      message: this.translate.instant(\"AUTH_PAGE.resetLinkFailureText\") + msg,\n      buttons: [\"OK\"],\n    });\n\n    await alert.present();\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { AuthPageRoutingModule } from \"./auth-routing.module\";\n\nimport { AuthPage } from \"./auth.page\";\nimport { TranslateModule } from \"@ngx-translate/core\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    IonicModule,\n    AuthPageRoutingModule,\n    TranslateModule,\n  ],\n  declarations: [AuthPage],\n})\nexport class AuthPageModule {}\n"]}