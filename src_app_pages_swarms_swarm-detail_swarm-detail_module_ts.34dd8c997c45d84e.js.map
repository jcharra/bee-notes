{"version":3,"file":"src_app_pages_swarms_swarm-detail_swarm-detail_module_ts.34dd8c997c45d84e.js","mappings":"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+BACA,CACEC,WAAY,EACZC,WAAY,GACZC,UAAW,EACXL,KAAM,QACND,aAAc,SAGlB,CACEG,0BACA,CACEC,WAAY,EACZC,WAAY,GACZC,UAAW,EACXL,KAAM,QACND,aAAc,SAGlB,CACEG,yBACA,CACEC,WAAY,EACZC,WAAY,GACZC,UAAW,EACXL,KAAM,QACND,aAAc,SAGlB,CACEG,yBACA,CACEC,WAAY,EACZC,WAAY,GACZC,UAAW,EACXL,KAAM,QACND,aAAc,SAGlB,CACEG,wBACA,CACEC,WAAY,EACZC,WAAY,GACZC,UAAW,EACXL,KAAM,QACND,aAAc,SAGlB,CACEG,yBACA,CACEC,WAAY,EACZC,WAAY,EACZC,UAAW,EACXL,KAAM,UACND,aAAc,WAGlB,CACEG,2BACA,CACEC,WAAY,EACZC,WAAY,EACZC,UAAW,EACXL,KAAM,UACND,aAAc,WAGlB,CACEG,cACA,CACEC,WAAY,EACZC,WAAY,GACZC,UAAW,EACXL,KAAM,SACND,aAAc,UAGlB,CACEG,uBACA,CACEC,WAAY,EACZC,WAAY,GACZC,UAAW,EACXL,KAAM,QACND,aAAc,SAGlB,CACEG,uBACA,CACEC,WAAY,EACZC,WAAY,GACZC,UAAW,EACXL,KAAM,QACND,aAAc","names":["notifier","source","lift","TakeUntilOperator","constructor","this","call","subscriber","takeUntilSubscriber","TakeUntilSubscriber","notifierSubscription","innerSubscribe","SimpleInnerSubscriber","seenValue","add","subscribe","SimpleOuterSubscriber","destination","super","notifyNext","complete","notifyComplete","i0","ctx_r6","oxw","ColonyDetailsCardComponent","queenService","router","ngOnInit","queenStatus$","getStatus","swarm","id","pipe","map","s","race","e","Race","birthYear","editColonyData","navigateByUrl","selectors","ctx_r10","JOURNAL_PLACEHOLDER","Array","fill","text","date","Date","routes","path","component","swarmService","journalService","route","loadingCtrl","alertCtrl","reminderService","toastController","translate","swarmGroupService","actionSheetController","Subject","ionViewWillEnter","swarmId","snapshot","params","userId","data","loadData","journalEntries","length","withSpinner","loading","create","message","instant","showBackdrop","present","getSwarm","takeUntil","destroyed$","getEntries","limit","entries","dismiss","loadReminders","getReminders","first","rs","reminders","markAsDeceased","header","buttons","cssClass","handler","__awaiter","showWhereToFindHint","markAsDissolved","markAsSold","role","duration","changeGroup","getGroups","groups","g","name","moveToGroup","targetId","fromGroup","toGroup","group","swarmIds","indexOf","filter","i","h","push","forkJoin","updateGroup","ngOnDestroy","next","editJournalEntry","entryId","SwarmDetailPage","ctx","loadChildren","Promise","then","m","SwarmJournalPageModule","FramesPageModule","SwarmDetailPageRoutingModule","RouterModule","SwarmDetailPageModule","CommonModule","FormsModule","IonicModule","TranslateModule","SharedModule","CrownComponent","JournalEntryShortComponent","c","CountableForEntryType","entry","type","amount","amountWithUnit","unitSingular","unit","Map","EntryType","lowerBound","upperBound","stepWidth"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js","./src/app/shared/colony-details-card/colony-details-card.component.html","./src/app/shared/colony-details-card/colony-details-card.component.ts","./src/app/pages/swarms/swarm-detail/swarm-detail.page.html","./src/app/pages/swarms/swarm-detail/swarm-detail.page.ts","./src/app/pages/swarms/swarm-detail/swarm-detail-routing.module.ts","./src/app/pages/swarms/swarm-detail/swarm-detail.module.ts","./src/app/shared/crown/crown.component.ts","./src/app/shared/journal-entry-short/journal-entry-short.component.html","./src/app/shared/journal-entry-short/journal-entry-short.component.ts","./src/app/types/Countable.ts"],"sourcesContent":["import { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\nexport function takeUntil(notifier) {\n    return (source) => source.lift(new TakeUntilOperator(notifier));\n}\nclass TakeUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n        if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    }\n}\nclass TakeUntilSubscriber extends SimpleOuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.seenValue = false;\n    }\n    notifyNext() {\n        this.seenValue = true;\n        this.complete();\n    }\n    notifyComplete() {\n    }\n}\n","<ion-grid *ngIf=\"queenStatus$ | async as queenStatus\" (click)=\"editColonyData()\">\n  <ion-row>\n    <ion-col size=\"3\">{{ \"COLONIES_PAGE.colonyKind\" | translate }}: </ion-col>\n    <ion-col size=\"8\">\n      {{ (swarm.isNucleus ? \"COLONIES_PAGE.nucleus\" : \"COLONIES_PAGE.fullColony\") | translate }}\n    </ion-col>\n    <ion-col size=\"1\">\n      <ion-icon name=\"create-outline\" size=\"lg\"></ion-icon>\n    </ion-col>\n  </ion-row>\n  <ion-row>\n    <ion-col size=\"3\">{{ \"QUEEN.race\" | translate }}: </ion-col>\n    <ion-col size=\"9\">\n      {{ \"QUEEN.\" + queenStatus.race | translate }}\n    </ion-col>\n  </ion-row>\n  <ion-row>\n    <ion-col size=\"3\">{{ \"QUEEN.year\" | translate }}:</ion-col>\n    <ion-col size=\"9\">\n      <queen-color [year]=\"queenStatus.birthYear\" *ngIf=\"queenStatus.birthYear\"></queen-color>\n      <div *ngIf=\"!queenStatus.birthYear\">\n        {{ \"QUEEN.UNKNOWN\" | translate }}\n      </div>\n    </ion-col>\n  </ion-row>\n  <ion-row *ngIf=\"swarm.about\">\n    <ion-col size=\"3\">{{ \"COLONIES_PAGE.aboutShort\" | translate }}:</ion-col>\n    <ion-col size=\"9\" [ngClass]=\"{ about: swarm.about.length > 50 }\">\n      {{ swarm.about }}\n    </ion-col>\n  </ion-row>\n</ion-grid>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { getYear } from \"date-fns\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport {\n  QueenService,\n  QueenStatus,\n  Race,\n} from \"src/app/services/queen.service\";\nimport { Swarm } from \"src/app/types/Swarm\";\n\n@Component({\n  selector: \"colony-details-card\",\n  templateUrl: \"./colony-details-card.component.html\",\n  styleUrls: [\"./colony-details-card.component.scss\"],\n})\nexport class ColonyDetailsCardComponent implements OnInit {\n  @Input() swarm: Swarm;\n  queenStatus$: Observable<QueenStatus>;\n\n  constructor(private queenService: QueenService, private router: Router) {}\n\n  ngOnInit() {\n    this.queenStatus$ = this.queenService.getStatus(this.swarm.id).pipe(\n      map((s: QueenStatus) => {\n        return {\n          race: s?.race || Race.UNKNOWN,\n          birthYear: s?.birthYear,\n        };\n      })\n    );\n  }\n\n  editColonyData() {\n    this.router.navigateByUrl(`/swarms/edit/${this.swarm.id}`);\n  }\n}\n","<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button [routerLink]=\"'/swarms'\">\n        <ion-icon name=\"arrow-back-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-title><strong>{{ swarm?.name }}</strong></ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-menu-button menu=\"first\"></ion-menu-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list [inset]=\"true\" mode=\"ios\" class=\"detailsCard\">\n    <colony-details-card *ngIf=\"swarm\" [swarm]=\"swarm\"></colony-details-card>\n  </ion-list>\n\n  <ion-list *ngIf=\"reminders?.length > 0\" [inset]=\"true\" mode=\"ios\">\n    <app-reminder-item\n      [reminder]=\"reminder\"\n      *ngFor=\"let reminder of reminders\"\n      (notifyChange)=\"loadReminders()\"\n    ></app-reminder-item>\n  </ion-list>\n\n  <ion-list [inset]=\"true\" mode=\"ios\">\n    <ion-item class=\"ion-text-center\">\n      <ion-label>\n        <strong>{{\"JOURNAL_PAGE.latestActivity\" | translate}}</strong>\n      </ion-label>\n    </ion-item>\n    <ion-item *ngFor=\"let entry of journalEntries\">\n      <ion-label *ngIf=\"entry.type\" (click)=\"editJournalEntry(entry.id)\">\n        <strong>{{ entry.date | date:'dd. MMM'}}: </strong>\n        <app-journal-entry-short [entry]=\"entry\"></app-journal-entry-short>\n      </ion-label>\n    </ion-item>\n    <ion-item *ngIf=\"journalEntries && journalEntries.length === 0\">\n      <i>{{\"JOURNAL_PAGE.noTrackedActivity\" | translate}}</i>\n    </ion-item>\n    <ion-item routerLink=\"journal\">\n      <ion-label>{{\"JOURNAL_PAGE.viewJournal\" | translate}}</ion-label>\n    </ion-item>\n  </ion-list>\n\n  <div class=\"controls-container\">\n    <ion-buttons class=\"ion-padding-horizontal\">\n      <ion-fab-button class=\"imgbutton\" routerLink=\"journal/edit\" [queryParams]=\"{type: 'varroa'}\">\n        <mite></mite>\n      </ion-fab-button>\n      <ion-fab-button class=\"imgbutton\" routerLink=\"journal/edit\" [queryParams]=\"{type: 'queen'}\">\n        <crown size=\"lg\" color=\"white\"></crown>\n      </ion-fab-button>\n      <ion-fab-button class=\"imgbutton\" routerLink=\"frames\">\n        <ion-icon name=\"git-compare-outline\"></ion-icon>\n      </ion-fab-button>\n      <ion-fab-button color=\"primary\" routerLink=\"journal/edit\" [queryParams]=\"{type: 'other'}\">\n        <ion-icon name=\"ellipsis-horizontal-outline\"></ion-icon>\n      </ion-fab-button>\n    </ion-buttons>\n    <ion-buttons class=\"ion-padding-horizontal\">\n      <ion-fab-button [routerLink]=\"'/reminders'\" [queryParams]=\"{swarmId: swarm?.id}\">\n        <ion-icon name=\"alarm-outline\"></ion-icon>\n      </ion-fab-button>\n      <ion-fab-button (click)=\"changeGroup()\">\n        <ion-icon name=\"exit-outline\"></ion-icon>\n      </ion-fab-button>\n      <ion-fab-button color=\"danger\" (click)=\"markAsDeceased()\">\n        <ion-icon name=\"close-circle-outline\"></ion-icon>\n      </ion-fab-button>\n    </ion-buttons>\n  </div>\n</ion-content>\n","import { Component, OnDestroy } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { ActionSheetController, AlertController, LoadingController, ToastController } from \"@ionic/angular\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { forkJoin, Subject } from \"rxjs\";\nimport { first, takeUntil } from \"rxjs/operators\";\nimport { SwarmGroup, SwarmGroupService } from \"src/app/services/swarm-group.service\";\nimport { JournalService } from \"../../../services/journal.service\";\nimport { Reminder, ReminderService } from \"../../../services/reminder.service\";\nimport { SwarmService } from \"../../../services/swarm.service\";\nimport { JournalEntry } from \"../../../types/JournalEntry\";\nimport { Swarm } from \"../../../types/Swarm\";\n\nconst JOURNAL_PLACEHOLDER = Array(3).fill({ text: \"\", date: new Date() });\n\n@Component({\n  selector: \"app-swarm-detail\",\n  templateUrl: \"./swarm-detail.page.html\",\n  styleUrls: [\"./swarm-detail.page.scss\"],\n})\nexport class SwarmDetailPage implements OnDestroy {\n  swarmId: string;\n  swarm: Swarm;\n  journalEntries: JournalEntry[] = JOURNAL_PLACEHOLDER;\n  userId: string;\n  reminders: Reminder[];\n  destroyed$ = new Subject<boolean>();\n  now = new Date();\n\n  constructor(\n    private swarmService: SwarmService,\n    private journalService: JournalService,\n    private route: ActivatedRoute,\n    private loadingCtrl: LoadingController,\n    private alertCtrl: AlertController,\n    private reminderService: ReminderService,\n    private toastController: ToastController,\n    private router: Router,\n    private translate: TranslateService,\n    private swarmGroupService: SwarmGroupService,\n    private actionSheetController: ActionSheetController\n  ) {}\n\n  ionViewWillEnter() {\n    this.swarmId = this.route.snapshot.params.swarmId;\n    this.userId = this.route.snapshot.data.userId;\n    this.loadData(!this.journalEntries || this.journalEntries.length === 0);\n  }\n\n  async loadData(withSpinner: boolean = true) {\n    const loading = await this.loadingCtrl.create({\n      message: this.translate.instant(\"JOURNAL_PAGE.loading\"),\n      showBackdrop: true,\n    });\n\n    withSpinner && (await loading.present());\n\n    this.swarmService\n      .getSwarm(this.swarmId)\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((s: Swarm) => {\n        this.swarm = s;\n      });\n\n    this.journalService\n      .getEntries(this.swarmId, { limit: JOURNAL_PLACEHOLDER.length })\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((entries: JournalEntry[]) => {\n        this.journalEntries = entries;\n        withSpinner && loading.dismiss();\n      });\n\n    this.loadReminders();\n  }\n\n  loadReminders() {\n    this.reminderService\n      .getReminders(this.swarmId)\n      .pipe(first())\n      .subscribe((rs: Reminder[]) => {\n        this.reminders = rs;\n      });\n  }\n\n  async markAsDeceased() {\n    const alert = await this.alertCtrl.create({\n      header: this.translate.instant(\"COLONIES_PAGE.closeColonyHeader\"),\n      message: this.translate.instant(\"COLONIES_PAGE.closeColonyBody\"),\n      buttons: [\n        {\n          text: this.translate.instant(\"COLONIES_PAGE.markAsDeceased\"),\n          cssClass: \"danger\",\n          handler: async () => {\n            this.swarmService.markAsDeceased(this.swarm).subscribe(() => {\n              this.router.navigateByUrl(\"/\");\n            });\n            this.showWhereToFindHint();\n          },\n        },\n        {\n          text: this.translate.instant(\"COLONIES_PAGE.markAsDissolved\"),\n          cssClass: \"danger\",\n          handler: async () => {\n            this.swarmService.markAsDissolved(this.swarm).subscribe(() => {\n              this.router.navigateByUrl(\"/\");\n            });\n            this.showWhereToFindHint();\n          },\n        },\n        {\n          text: this.translate.instant(\"COLONIES_PAGE.markAsSold\"),\n          cssClass: \"danger\",\n          handler: async () => {\n            this.swarmService.markAsSold(this.swarm).subscribe(() => {\n              this.router.navigateByUrl(\"/\");\n            });\n            this.showWhereToFindHint();\n          },\n        },\n        {\n          text: this.translate.instant(\"GENERAL.cancel\"),\n          role: \"cancel\",\n        },\n      ],\n    });\n\n    await alert.present();\n  }\n\n  async showWhereToFindHint() {\n    const toast = await this.toastController.create({\n      message: this.translate.instant(\"COLONIES_PAGE.whereToFindExColoniesHint\"),\n      duration: 6000,\n    });\n    toast.present();\n  }\n\n  changeGroup() {\n    this.swarmGroupService\n      .getGroups()\n      .pipe(first())\n      .subscribe(async (groups: SwarmGroup[]) => {\n        const selection = await this.actionSheetController.create({\n          header: this.translate.instant(\"COLONIES_PAGE.changeGroupSelect\"),\n          buttons: groups.map((g) => {\n            return {\n              text: g.name,\n              handler: () => {\n                this.moveToGroup(groups, g.id);\n              },\n            };\n          }),\n        });\n\n        selection.present();\n      });\n  }\n\n  moveToGroup(groups: SwarmGroup[], targetId: string) {\n    let fromGroup, toGroup;\n    for (let group of groups) {\n      if (group.swarmIds && group.swarmIds.indexOf(this.swarmId) > -1) {\n        fromGroup = group;\n      }\n\n      if (group.id === targetId) {\n        toGroup = group;\n      }\n    }\n\n    if (fromGroup.id === toGroup.id) {\n      return;\n    }\n\n    fromGroup.swarmIds = fromGroup.swarmIds.filter((i) => i !== this.swarmId);\n    if (toGroup.swarmIds) {\n      toGroup.swarmIds.push(this.swarmId);\n    } else {\n      toGroup.swarmIds = [this.swarmId];\n    }\n\n    forkJoin([this.swarmGroupService.updateGroup(fromGroup), this.swarmGroupService.updateGroup(toGroup)]).subscribe(\n      () => {\n        this.router.navigateByUrl(\"/swarms\");\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  editJournalEntry(entryId: string) {\n    this.router.navigateByUrl(`/swarms/view/${this.swarmId}/journal/edit?entryId=${entryId}`);\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { SwarmDetailPage } from \"./swarm-detail.page\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SwarmDetailPage,\n  },\n  {\n    path: \"journal\",\n    loadChildren: () => import(\"../swarm-journal/swarm-journal.module\").then((m) => m.SwarmJournalPageModule),\n  },\n  {\n    path: \"frames\",\n    loadChildren: () => import(\"./frames/frames.module\").then((m) => m.FramesPageModule),\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SwarmDetailPageRoutingModule {}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { IonicModule } from \"@ionic/angular\";\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { SharedModule } from \"../../../shared/shared.module\";\nimport { SwarmDetailPageRoutingModule } from \"./swarm-detail-routing.module\";\nimport { SwarmDetailPage } from \"./swarm-detail.page\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, SwarmDetailPageRoutingModule, TranslateModule, SharedModule],\n  declarations: [SwarmDetailPage],\n})\nexport class SwarmDetailPageModule {}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"crown\",\n  template:\n    '<ion-img class=\"filterWhite\" src=\"assets/img/crown.png\"></ion-img>',\n  styleUrls: [\"./crown.component.scss\"],\n})\nexport class CrownComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<div class=\"type\">{{ \"ACTIONS.\" + entry.type | translate }}</div>\n<div class=\"amount\" *ngIf=\"amountWithUnit\">({{ amountWithUnit }})</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { CountableForEntryType } from \"../../types/Countable\";\nimport { JournalEntry } from \"../../types/JournalEntry\";\n\n@Component({\n  selector: \"app-journal-entry-short\",\n  templateUrl: \"./journal-entry-short.component.html\",\n  styleUrls: [\"./journal-entry-short.component.css\"],\n})\nexport class JournalEntryShortComponent implements OnInit {\n  @Input() entry: JournalEntry;\n  amountWithUnit: string;\n\n  constructor(private translate: TranslateService) {}\n\n  ngOnInit() {\n    const c = CountableForEntryType.get(this.entry.type);\n    if (c && (this.entry.amount || this.entry.amount === 0)) {\n      this.amountWithUnit =\n        this.entry.amount === 1\n          ? `1 ${this.translate.instant(\"UNIT.\" + c.unitSingular)}`\n          : `${this.entry.amount} ${this.translate.instant(\"UNIT.\" + c.unit)}`;\n    }\n  }\n}\n","import { EntryType } from \"src/app/types/EntryType\";\n\nexport interface Countable {\n  unit: string;\n  unitSingular: string;\n  lowerBound: number;\n  upperBound: number;\n  stepWidth: number;\n}\n\nexport const CountableForEntryType: Map<EntryType, Countable> = new Map([\n  [\n    EntryType.VARROA_CHECK_END,\n    {\n      lowerBound: 1,\n      upperBound: 200,\n      stepWidth: 1,\n      unit: \"mites\",\n      unitSingular: \"mite\",\n    },\n  ],\n  [\n    EntryType.FOOD_ADDED,\n    {\n      lowerBound: 0.5,\n      upperBound: 20,\n      stepWidth: 0.5,\n      unit: \"kg\",\n      unitSingular: \"kg\",\n    },\n  ],\n  [\n    EntryType.WEIGHT_MEASURED,\n    {\n      lowerBound: 5.0,\n      upperBound: 80,\n      stepWidth: 1,\n      unit: \"kg\",\n      unitSingular: \"kg\",\n    },\n  ],\n  [\n    EntryType.FRAMES_BROOD_COUNTED,\n    {\n      lowerBound: 0.5,\n      upperBound: 20,\n      stepWidth: 0.5,\n      unit: \"combs\",\n      unitSingular: \"comb\",\n    },\n  ],\n  [\n    EntryType.FRAMES_EMPTY_PANEL_INSERTED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"panels\",\n      unitSingular: \"panel\",\n    },\n  ],\n  [\n    EntryType.FRAMES_EMPTY_PANEL_REMOVED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"panels\",\n      unitSingular: \"panel\",\n    },\n  ],\n  [\n    EntryType.FRAMES_HONEY_HARVESTED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"kg\",\n      unitSingular: \"kg\",\n    },\n  ],\n  [\n    EntryType.FRAMES_DRONE_INSERTED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"frames\",\n      unitSingular: \"frame\",\n    },\n  ],\n  [\n    EntryType.FRAMES_DRONE_REMOVED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"frames\",\n      unitSingular: \"frame\",\n    },\n  ],\n  [\n    EntryType.FRAMES_EMPTY_COMBS_INSERTED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"combs\",\n      unitSingular: \"comb\",\n    },\n  ],\n  [\n    EntryType.FRAMES_EMPTY_COMBS_REMOVED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"combs\",\n      unitSingular: \"comb\",\n    },\n  ],\n  [\n    EntryType.FRAMES_BROOD_INSERTED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"combs\",\n      unitSingular: \"comb\",\n    },\n  ],\n  [\n    EntryType.FRAMES_BROOD_REMOVED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"combs\",\n      unitSingular: \"comb\",\n    },\n  ],\n  [\n    EntryType.FRAMES_FOOD_INSERTED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"combs\",\n      unitSingular: \"comb\",\n    },\n  ],\n  [\n    EntryType.FRAMES_FOOD_REMOVED,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"combs\",\n      unitSingular: \"comb\",\n    },\n  ],\n  [\n    EntryType.FRAMES_STOREYS_ADDED,\n    {\n      lowerBound: 1,\n      upperBound: 3,\n      stepWidth: 1,\n      unit: \"storeys\",\n      unitSingular: \"storey\",\n    },\n  ],\n  [\n    EntryType.FRAMES_STOREYS_REMOVED,\n    {\n      lowerBound: 1,\n      upperBound: 3,\n      stepWidth: 1,\n      unit: \"storeys\",\n      unitSingular: \"storey\",\n    },\n  ],\n  [\n    EntryType.GOT_STUNG,\n    {\n      lowerBound: 1,\n      upperBound: 20,\n      stepWidth: 1,\n      unit: \"stings\",\n      unitSingular: \"sting\",\n    },\n  ],\n  [\n    EntryType.QUEEN_CELL_SPOTTED,\n    {\n      lowerBound: 1,\n      upperBound: 10,\n      stepWidth: 1,\n      unit: \"cells\",\n      unitSingular: \"cell\",\n    },\n  ],\n  [\n    EntryType.QUEEN_CELL_REMOVED,\n    {\n      lowerBound: 1,\n      upperBound: 10,\n      stepWidth: 1,\n      unit: \"cells\",\n      unitSingular: \"cell\",\n    },\n  ],\n]);\n"]}