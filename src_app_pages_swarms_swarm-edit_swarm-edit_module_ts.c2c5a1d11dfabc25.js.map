{"version":3,"file":"src_app_pages_swarms_swarm-edit_swarm-edit_module_ts.c2c5a1d11dfabc25.js","mappings":"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","names":["i0","SwarmEditPage","constructor","swarmService","swarmGroupService","queenService","route","router","formBuilder","this","getYear","Date","addYears","races","Object","keys","Race","ngOnInit","swarmId","snapshot","params","groupId","queryParams","ancestors$","getSwarms","colonyForm","group","name","Validators","race","birthYear","isNucleus","ancestorId","about","combineLatest","getSwarm","getStatus","subscribe","swarm","status","controls","setValue","changeBirthYear","diff","newVal","value","maxYear","minYear","save","vals","forkJoin","updateSwarm","id","saveStatus","navigateByUrl","createSwarm","pipe","switchMap","addSwarmToGroup","tap","selectors","ctx","routes","path","component","SwarmEditPageRoutingModule","RouterModule","SwarmEditPageModule","CommonModule","FormsModule","IonicModule","TranslateModule","ReactiveFormsModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/pages/swarms/swarm-edit/swarm-edit.page.html","./src/app/pages/swarms/swarm-edit/swarm-edit.page.ts","./src/app/pages/swarms/swarm-edit/swarm-edit-routing.module.ts","./src/app/pages/swarms/swarm-edit/swarm-edit.module.ts"],"sourcesContent":["<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button\n        [routerLink]=\"swarmId ? '/swarms/view/' + swarmId : '/swarms'\"\n      >\n        <ion-icon name=\"arrow-back-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-title\n      ><strong\n        >{{ (swarmId ? 'COLONIES_PAGE.editColony' : 'COLONIES_PAGE.newColony') |\n        translate }}</strong\n      ></ion-title\n    >\n    <ion-buttons slot=\"end\">\n      <ion-menu-button menu=\"first\"></ion-menu-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <form [formGroup]=\"colonyForm\">\n    <ion-list mode=\"ios\" [inset]=\"true\">\n      <ion-item>\n        <ion-label position=\"stacked\"\n          >{{ 'COLONIES_PAGE.colonyName' | translate }}</ion-label\n        >\n        <ion-input\n          formControlName=\"name\"\n          placeholder=\"{{'COLONIES_PAGE.colonyNamePlaceholder' | translate}}\"\n        >\n        </ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-label position=\"stacked\"\n          >{{'QUEEN.queenRace' | translate}}</ion-label\n        >\n        <ion-select\n          name=\"race\"\n          interface=\"action-sheet\"\n          formControlName=\"race\"\n          [cancelText]=\"'GENERAL.cancel' | translate\"\n          [okText]=\"'GENERAL.ok' | translate\"\n        >\n          <ion-select-option *ngFor=\"let option of races\" [value]=\"option\"\n            >{{ 'QUEEN.' + option | translate }}</ion-select-option\n          >\n        </ion-select>\n      </ion-item>\n    </ion-list>\n\n    <ion-list [inset]=\"true\" mode=\"ios\">\n      <ion-item>\n        <ion-label class=\"ion-text-center\"\n          >{{'QUEEN.birthYear' | translate}}</ion-label\n        >\n      </ion-item>\n      <ion-item>\n        <ion-icon\n          [color]=\"colonyForm.controls.birthYear.value > minYear ? 'primary' : 'light'\"\n          name=\"remove-circle-outline\"\n          slot=\"start\"\n          (click)=\"changeBirthYear(-1)\"\n        ></ion-icon>\n        <ion-label class=\"ion-text-center\"\n          ><strong\n            ><queen-color\n              [year]=\"colonyForm.controls.birthYear.value\"\n            ></queen-color\n          ></strong>\n        </ion-label>\n        <ion-icon\n          [color]=\"colonyForm.controls.birthYear.value < maxYear ? 'primary' : 'light'\"\n          name=\"add-circle-outline\"\n          slot=\"end\"\n          (click)=\"changeBirthYear(1)\"\n        ></ion-icon>\n      </ion-item>\n    </ion-list>\n\n    <ion-list [inset]=\"true\" mode=\"ios\">\n      <ion-item>\n        <ion-label class=\"ion-text-center\">\n          {{'COLONIES_PAGE.colonyKind' | translate}}\n        </ion-label>\n      </ion-item>\n      <ion-radio-group formControlName=\"isNucleus\">\n        <ion-item>\n          <ion-label>{{'QUEEN.nucleus' | translate}}</ion-label>\n          <ion-radio slot=\"start\" color=\"success\" [value]=\"true\"></ion-radio>\n        </ion-item>\n        <ion-item>\n          <ion-label>{{'QUEEN.fullColony' | translate}}</ion-label>\n          <ion-radio slot=\"start\" color=\"success\" [value]=\"false\"></ion-radio>\n        </ion-item>\n      </ion-radio-group>\n    </ion-list>\n\n    <ng-container *ngIf=\"ancestors$ | async as ancestors\">\n      <ion-list [inset]=\"true\" mode=\"ios\">\n        <ion-item *ngIf=\"ancestors && ancestors.length > 1\">\n          <ion-label position=\"stacked\"\n            >{{'QUEEN.ancestor' | translate}}</ion-label\n          >\n          <ion-select\n            name=\"ancestorId\"\n            interface=\"action-sheet\"\n            formControlName=\"ancestorId\"\n            [cancelText]=\"'GENERAL.cancel' | translate\"\n            [okText]=\"'GENERAL.ok' | translate\"\n          >\n            <ion-select-option\n              *ngFor=\"let option of ancestors\"\n              [value]=\"option.id\"\n              >{{ option.name }}</ion-select-option\n            >\n          </ion-select>\n        </ion-item>\n      </ion-list>\n    </ng-container>\n\n    <ion-list [inset]=\"true\" mode=\"ios\">\n      <ion-item>\n        <ion-label position=\"stacked\"\n          >{{ 'COLONIES_PAGE.about' | translate }}</ion-label\n        >\n        <ion-textarea\n          maxlength=\"100\"\n          formControlName=\"about\"\n          placeholder=\"{{'COLONIES_PAGE.aboutPlaceholder' | translate}}\"\n        >\n        </ion-textarea>\n      </ion-item>\n    </ion-list>\n\n    <ion-button\n      class=\"ion-padding-horizontal\"\n      [disabled]=\"!colonyForm.valid\"\n      type=\"submit\"\n      (click)=\"save()\"\n    >\n      {{ 'GENERAL.save' | translate }}\n    </ion-button>\n  </form>\n</ion-content>\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { addYears, getYear } from \"date-fns\";\nimport { combineLatest, forkJoin, Observable } from \"rxjs\";\nimport { switchMap, tap } from \"rxjs/operators\";\nimport { QueenService, Race } from \"src/app/services/queen.service\";\nimport { SwarmGroupService } from \"src/app/services/swarm-group.service\";\nimport { SwarmService } from \"src/app/services/swarm.service\";\nimport { Swarm } from \"src/app/types/Swarm\";\n\n@Component({\n  selector: \"app-swarm-edit\",\n  templateUrl: \"./swarm-edit.page.html\",\n  styleUrls: [\"./swarm-edit.page.scss\"],\n})\nexport class SwarmEditPage implements OnInit {\n  swarmId: string;\n  groupId: string;\n  colonyForm: FormGroup;\n  races = [];\n  maxYear = getYear(new Date());\n  minYear = getYear(addYears(new Date(), -4));\n  ancestors$: Observable<Swarm[]>;\n\n  constructor(\n    private swarmService: SwarmService,\n    private swarmGroupService: SwarmGroupService,\n    private queenService: QueenService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {\n    this.races = Object.keys(Race);\n  }\n\n  ngOnInit() {\n    this.swarmId = this.route.snapshot.params.swarmId;\n    this.groupId = this.route.snapshot.queryParams.groupId;\n\n    this.ancestors$ = this.swarmService.getSwarms();\n\n    this.colonyForm = this.formBuilder.group({\n      name: [null, Validators.required],\n      race: [null],\n      birthYear: [getYear(new Date())],\n      isNucleus: [null],\n      ancestorId: [null],\n      about: [null],\n    });\n\n    if (this.swarmId) {\n      combineLatest([this.swarmService.getSwarm(this.swarmId), this.queenService.getStatus(this.swarmId)]).subscribe(\n        ([swarm, status]) => {\n          if (status) {\n            status.race && this.colonyForm.controls.race.setValue(status.race);\n            status.birthYear && this.colonyForm.controls.birthYear.setValue(status.birthYear);\n          }\n\n          if (swarm) {\n            this.colonyForm.controls.isNucleus.setValue(!!swarm.isNucleus);\n            swarm.name && this.colonyForm.controls.name.setValue(swarm.name);\n            swarm.ancestorId && this.colonyForm.controls.ancestorId.setValue(swarm.ancestorId);\n            swarm.about && this.colonyForm.controls.about.setValue(swarm.about);\n          }\n        }\n      );\n    } else {\n      this.colonyForm.controls.isNucleus.setValue(true);\n    }\n  }\n\n  changeBirthYear(diff: number) {\n    const newVal = this.colonyForm.controls.birthYear.value + diff;\n    if (newVal <= this.maxYear && newVal >= this.minYear) {\n      this.colonyForm.controls.birthYear.setValue(newVal);\n    }\n  }\n\n  save() {\n    const vals = this.colonyForm.value;\n\n    if (this.swarmId) {\n      forkJoin([\n        this.swarmService.updateSwarm({ id: this.swarmId, ...vals }),\n        this.queenService.saveStatus(this.swarmId, vals),\n      ]).subscribe(() => {\n        this.router.navigateByUrl(\"/swarms/view/\" + this.swarmId);\n      });\n    } else {\n      this.swarmService\n        .createSwarm(vals.name, vals.ancestorId, vals.isNucleus)\n        .pipe(\n          switchMap((swarmId: string) => {\n            return forkJoin([\n              this.queenService.saveStatus(swarmId, vals),\n              this.swarmGroupService.addSwarmToGroup(swarmId, this.groupId),\n            ]).pipe(\n              tap(() => {\n                this.router.navigateByUrl(\"/swarms/view/\" + swarmId);\n              })\n            );\n          })\n        )\n        .subscribe();\n    }\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { SwarmEditPage } from \"./swarm-edit.page\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SwarmEditPage,\n  },\n  {\n    path: \":swarmId\",\n    component: SwarmEditPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SwarmEditPageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { SwarmEditPageRoutingModule } from \"./swarm-edit-routing.module\";\n\nimport { SwarmEditPage } from \"./swarm-edit.page\";\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { SharedModule } from \"src/app/shared/shared.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SwarmEditPageRoutingModule,\n    TranslateModule,\n    ReactiveFormsModule,\n    SharedModule,\n  ],\n  declarations: [SwarmEditPage],\n})\nexport class SwarmEditPageModule {}\n"]}