{"version":3,"file":"src_app_pages_swarms_swarms_module_ts.69c89ae40c717ecd.js","mappings":"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","names":["dateLeft","dateRight","requiredArgs","arguments","toDate","getTime","millisecondsInHour","Math","pow","roundingMap","ceil","round","floor","trunc","value","method","defaultRoundingMethod","options","diff","differenceInMilliseconds","getRoundingMethod","roundingMethod","ColonyStatus","VarroaStatus","QueenHealth","ColonyAggression","StatusService","constructor","getColonyStatus","entries","varroaEnd","entry","type","EntryType","status","varroaAvg","amount","differenceInHours","date","Date","l","colonyStatus","avgCount","factory","AnimationService","animationCtrl","fadeIn","selector","duration","setTimeout","this","create","addElement","document","querySelector","fromTo","play","pulse","iterations","keyframes","offset","transform","rotate","speed","querySelectorAll","i0","RateApp","registerPlugin","web","i","then","m","RateAppWeb","dirtyDateLeft","dirtyDateRight","yearDiff","getFullYear","monthDiff","getMonth","dirtyDate","setHours","month","setFullYear","endOfDay","endOfMonth","result","sign","compareAsc","difference","abs","differenceInCalendarMonths","getDate","setDate","setMonth","isLastMonthNotFull","isLastDayOfMonth","Number","validDate","d","isNaN","storageLastReviewRequestDate","AppreviewService","plt","checkReview","swarms","is","length","lastDate","Storage","key","differenceInMonths","requestReview","createdDates","map","s","created","filter","sort","oldest","monthsAgo","toISOString","ctx_r11","oxw","ctx_r19","ctx_r21","ctx_r22","ctx_r23","ctx_r24","ctx_r25","ctx_r26","SwarmsPage","swarmService","journalService","alertCtrl","loadingController","statusService","swarmGroupService","translate","purchases","animationService","router","appreview","storageSync","reminderService","forceReloadSwarms","event","clearStorage","loadSwarms","target","complete","loading","getFromStorage","LocalStorageKey","message","instant","showBackdrop","present","start","getSwarms","pipe","first","tap","console","log","switchMap","groupSwarms","groups","_groupsDiffer","sortedSwarmGroups","loadJournalEntries","loadGroupReminders","subscribe","dismiss","err","getReminders","rs","group","rems","r","groupId","id","r1","r2","reminders","journalUpdates","forEach","sw","push","getDigest","e","lastAction","statusInfo","of","forkJoin","getGroups","swarmsById","Map","set","displayGroups","g","displayGroup","name","lat","lng","swarmIds","sid","swarm","get","ionViewDidEnter","editSwarmGroup","existing","header","inputs","placeholder","buttons","text","role","cssClass","handler","trim","action","updateGroup","createGroup","onCreationFailure","focus","createSwarm","checkLimitReached","_getNumberOfSwarms","requireFullVersion","navigateByUrl","msg","doReorder","ev","groupIdx","fromIdx","detail","from","toIdx","to","splice","catch","error","num","oldGroups","newGroups","og","ng","j","isNucleus","selectors","IonReorderGroup","ctx","routes","path","component","loadChildren","Promise","SwarmDetailPageModule","SwarmEditPageModule","SwarmsPageRoutingModule","RouterModule","GroupHeaderComponent","EventEmitter","ngOnInit","rename","gid","renameEvent","emit","WeatherType","WeatherService","http","getForecast","cacheKey","cachedValue","cache","dateLeftStartOfDay","startOfDay","dateRightStartOfDay","isSameDay","current","fc","daily","dt","temp","min","max","WeatherForecastComponent","weatherService","forecast$","Infinity","StatusIndicatorComponent","routerActive","refresh","paramMap","url","colonyId","varroaInfo","_determineVarroaInfo","queenHealth","_determineQueenHealth","aggression","_determineAggression","average","_getVarroaStatusForTimeOfYear","avg","ctx_r3","ctx_r5","ctx_r7","GroupActionBarComponent","groupService","loadingCtrl","addNewSwarm","addSwarmEvent","deleteGroup","deleteGroupEvent","setLocation","__awaiter","changeEvent","onSetLocationError","startTreatment","createEntry","startDiagnosis","SwarmsPageModule","CommonModule","FormsModule","IonicModule","SharedModule","TranslateModule","JournalService","db","authService","swarmId","getEntries","limit","writeToStorage","config","startAtDate","startAt","endAtDate","endAt","getUser","user","cached","entryCacheForColony","listVal","query","ref","uid","orderByChild","limitToLast","keyField","take","data","item","unshift","Object","a","b","getEntry","entryId","objectVal","clearCacheForColony","fbEntry","convertToFirebaseEntry","updateEntry","update","deleteEntry","remove","deletable","k","keys","startsWith","delete","clearFromStorage","clone","MiteColor","MiteSize","MiteComponent","WHITE","large","ReminderItemComponent","toastController","deleteReminder","reminder","onReminderDismissed","notifyChange","actionsForType","queen","QUEEN_SPOTTED","QUEEN_ADDED","QUEEN_DECEASED","QUEEN_EGGS_SPOTTED","QUEEN_CELL_SPOTTED","QUEEN_CELL_REMOVED","COLONY_SWARMED","varroa","VARROA_CHECK_START","VARROA_CHECK_END","VARROA_TREATMENT","frames","FRAMES_BROOD_INSERTED","FRAMES_BROOD_REMOVED","FRAMES_DRONE_INSERTED","FRAMES_DRONE_REMOVED","FRAMES_EMPTY_COMBS_INSERTED","FRAMES_EMPTY_COMBS_REMOVED","FRAMES_EMPTY_PANEL_INSERTED","FRAMES_EMPTY_PANEL_REMOVED","FRAMES_HONEY_HARVESTED","FRAMES_FOOD_INSERTED","FRAMES_FOOD_REMOVED","FRAMES_STOREYS_ADDED","FRAMES_STOREYS_REMOVED","other","FOOD_ADDED","WEIGHT_MEASURED","GOT_STUNG","GENERAL_NOTE"],"sourceRoot":"webpack:///","sources":["./node_modules/date-fns/esm/differenceInMilliseconds/index.js","./node_modules/date-fns/esm/constants/index.js","./node_modules/date-fns/esm/_lib/roundingMethods/index.js","./node_modules/date-fns/esm/differenceInHours/index.js","./src/app/types/ColonyStatus.ts","./src/app/services/status.service.ts","./src/app/services/animation.service.ts","./node_modules/capacitor-rate-app/dist/esm/index.js","./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","./node_modules/date-fns/esm/compareAsc/index.js","./node_modules/date-fns/esm/endOfDay/index.js","./node_modules/date-fns/esm/endOfMonth/index.js","./node_modules/date-fns/esm/isLastDayOfMonth/index.js","./node_modules/date-fns/esm/differenceInMonths/index.js","./src/app/services/appreview.service.ts","./src/app/pages/swarms/swarms.page.html","./src/app/pages/swarms/swarms.page.ts","./src/app/pages/swarms/swarms-routing.module.ts","./src/app/shared/group-header-component/group-header.component.html","./src/app/shared/group-header-component/group-header.component.ts","./src/app/services/weather.service.ts","./node_modules/date-fns/esm/isSameDay/index.js","./src/app/shared/weather-forecast/weather-forecast.component.html","./src/app/shared/weather-forecast/weather-forecast.component.ts","./src/app/shared/status-indicator/status-indicator.component.html","./src/app/shared/status-indicator/status-indicator.component.ts","./src/app/shared/group-action-bar/group-action-bar.component.html","./src/app/shared/group-action-bar/group-action-bar.component.ts","./src/app/pages/swarms/swarms.module.ts","./src/app/services/journal.service.ts","./src/app/shared/mite/mite.component.ts","./src/app/shared/reminder-item/reminder-item.component.ts","./src/app/shared/reminder-item/reminder-item.component.html","./src/app/shared/shared.module.ts","./src/app/types/EntryType.ts"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Days in 1 year\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * @name daysInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var daysInYear = 365.2425;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;\n/**\n * Seconds in 1 day\n *\n * @name secondsInDay\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInDay = secondsInHour * 24;\n/**\n * Seconds in 1 week\n *\n * @name secondsInWeek\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInWeek = secondsInDay * 7;\n/**\n * Seconds in 1 year\n *\n * @name secondsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInYear = secondsInDay * daysInYear;\n/**\n * Seconds in 1 month\n *\n * @name secondsInMonth\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMonth = secondsInYear / 12;\n/**\n * Seconds in 1 quarter\n *\n * @name secondsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInQuarter = secondsInMonth * 3;","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function trunc(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","export enum ColonyStatus {\n  VARROA_MEDIUM = \"VARROA_MEDIUM\",\n  VARROA_CRITICAL = \"VARROA_CRITICAL\",\n  VARROA_OK = \"VARROA_OK\",\n  SWARMING = \"SWARMING\",\n}\n\nexport interface ColonyStatusInfo {\n  colonyStatus: ColonyStatus;\n  avgCount: number;\n}\n\nexport enum VarroaStatus {\n  OK = \"OK\",\n  MEDIUM = \"MEDIUM\",\n  HIGH = \"HIGH\",\n  NEEDS_CHECK = \"NEEDS_CHECK\",\n  UNKNOWN = \"UNKNOWN\",\n}\n\nexport enum QueenHealth {\n  EXCELLENT = \"EXCELLENT\",\n  GOOD = \"GOOD\",\n  MEDIUM = \"MEDIUM\",\n  POOR = \"POOR\",\n  PROBABLY_DEAD = \"PROBABLY_DEAD\",\n  DEAD = \"DEAD\",\n  NEEDS_CHECK = \"NEEDS_CHECK\",\n  UNKNOWN = \"UNKNOWN\",\n}\n\nexport enum ColonyAggression {\n  FRIENDLY = \"FRIENDLY\",\n  SLIGHTLY_AGGRESSIVE = \"SLIGHTLY_AGGRESSIVE\",\n  AGGRESSIVE = \"AGGRESSIVE\",\n  SUPER_AGGRESSIVE = \"SUPER_AGGRESSIVE\",\n  UNKNOWN = \"UNKNOWN\",\n}\n","import { Injectable } from \"@angular/core\";\nimport { differenceInHours } from \"date-fns\";\nimport { ColonyStatus, ColonyStatusInfo } from \"../types/ColonyStatus\";\nimport { EntryType } from \"../types/EntryType\";\nimport { JournalEntry } from \"../types/JournalEntry\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class StatusService {\n  getColonyStatus(entries: JournalEntry[]): ColonyStatusInfo {\n    let varroaEnd;\n    for (let entry of entries) {\n      if (entry.type === EntryType.VARROA_CHECK_END) {\n        varroaEnd = entry;\n      } else if (entry.type === EntryType.VARROA_CHECK_START && varroaEnd) {\n        let varroaAvg = varroaEnd.amount\n          ? +varroaEnd.amount /\n            ((differenceInHours(varroaEnd.date, new Date(entry.date)) || 1) /\n              24)\n          : 0;\n\n        varroaAvg = Math.round(varroaAvg);\n\n        let status: ColonyStatus;\n        if (varroaAvg >= 10) {\n          status = ColonyStatus.VARROA_CRITICAL;\n        } else if (varroaAvg >= 5) {\n          status = ColonyStatus.VARROA_MEDIUM;\n        } else {\n          status = ColonyStatus.VARROA_OK;\n        }\n\n        return {\n          colonyStatus: status,\n          avgCount: varroaAvg,\n        };\n      }\n    }\n  }\n\n  constructor() {}\n}\n","import { Injectable } from \"@angular/core\";\nimport { AnimationController } from \"@ionic/angular\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AnimationService {\n  constructor(private animationCtrl: AnimationController) {}\n\n  fadeIn(selector: string, duration: number) {\n    setTimeout(() => {\n      const animation = this.animationCtrl\n        .create()\n        .addElement(document.querySelector(selector))\n        .duration(duration)\n        .fromTo(\"opacity\", \"0\", \"1\");\n      animation.play();\n    }, 200);\n  }\n\n  pulse(selector: string, iterations: number) {\n    setTimeout(() => {\n      const animation = this.animationCtrl\n        .create()\n        .addElement(document.querySelector(selector))\n        .duration(1000)\n        .iterations(iterations)\n        .keyframes([\n          { offset: 0, transform: \"scale(1.0)\" },\n          { offset: 0.2, transform: \"scale(1.3)\" },\n          { offset: 0.4, transform: \"scale(1.0)\" },\n        ]);\n      animation.play();\n    }, 200);\n  }\n\n  rotate(selector: string, iterations: number, duration: number = 10000, speed: number = 1) {\n    setTimeout(() => {\n      const animation = this.animationCtrl\n        .create()\n        .addElement(document.querySelectorAll(selector))\n        .duration(duration)\n        .iterations(iterations)\n        .fromTo(\"transform\", \"rotate(0deg)\", `rotate(${speed * 360}deg)`);\n      animation.play();\n    }, 1000);\n  }\n}\n","import { registerPlugin } from '@capacitor/core';\nconst RateApp = registerPlugin('RateApp', {\n    web: () => import('./web').then(m => new m.RateAppWeb()),\n});\nexport * from './definitions';\nexport { RateApp };\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import { Injectable } from \"@angular/core\";\nimport { Swarm } from \"../types/Swarm\";\nimport { RateApp } from \"capacitor-rate-app\";\nimport { differenceInMonths } from \"date-fns\";\nimport { Platform } from \"@ionic/angular\";\nimport { Storage } from \"@capacitor/storage\";\n\nconst validDate = (d) => d && d.getTime && !isNaN(d.getTime());\nconst storageLastReviewRequestDate = \"LAST_REVIEW_REQUEST\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AppreviewService {\n  constructor(private plt: Platform) {}\n\n  async checkReview(swarms: Swarm[]) {\n    if (!this.plt.is(\"ios\")) {\n      return;\n    }\n\n    if (!swarms || swarms.length === 0) {\n      return;\n    }\n\n    const lastDate = await Storage.get({ key: storageLastReviewRequestDate });\n    if (lastDate && lastDate.value) {\n      if (differenceInMonths(new Date(), new Date(lastDate.value)) > 3) {\n        this.requestReview();\n      }\n    } else {\n      // The user has never been asked for a review => determine how long ago\n      // the creation of the first colony has been\n      let createdDates = swarms.map((s) => s.created).filter(validDate);\n\n      if (createdDates.length === 0) {\n        return;\n      }\n\n      createdDates.sort();\n\n      const oldest = createdDates[0];\n\n      const monthsAgo = differenceInMonths(new Date(), oldest);\n\n      if (monthsAgo > 2) {\n        this.requestReview();\n      }\n    }\n  }\n\n  private async requestReview() {\n    await Storage.set({\n      key: storageLastReviewRequestDate,\n      value: new Date().toISOString(),\n    });\n    RateApp.requestReview();\n  }\n}\n","<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"end\">\n      <ion-menu-button menu=\"first\"></ion-menu-button>\n    </ion-buttons>\n    <ion-title> {{ 'COLONIES_PAGE.pageTitle' | translate }} </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"forceReloadSwarms($event)\">\n    <ion-refresher-content></ion-refresher-content>\n  </ion-refresher>\n  <ng-container *ngIf=\"sortedSwarmGroups\">\n    <ion-list [inset]=\"true\" mode=\"ios\" lines=\"full\" *ngIf=\"sortedSwarmGroups.length === 0\">\n      <ion-item class=\"ion-padding-vertical\" lines=\"none\"> {{ 'COLONIES_PAGE.noColonies' | translate }} 🐝 </ion-item>\n    </ion-list>\n\n    <ng-container *ngFor=\"let group of sortedSwarmGroups; let idx = index\">\n      <ion-list [inset]=\"true\" mode=\"ios\" lines=\"full\">\n        <app-group-header\n          [group]=\"group\"\n          (changeEvent)=\"loadSwarms()\"\n          (renameEvent)=\"editSwarmGroup($event)\"\n        ></app-group-header>\n        <app-weather-forecast [lat]=\"group.lat\" [lng]=\"group.lng\" *ngIf=\"group.lat && group.lng\"></app-weather-forecast>\n        <ng-container *ngIf=\"group.reminders && group.reminders.length > 0\">\n          <app-reminder-item\n            [reminder]=\"reminder\"\n            *ngFor=\"let reminder of group.reminders\"\n            (notifyChange)=\"loadSwarms()\"\n          ></app-reminder-item>\n        </ng-container>\n        <ion-reorder-group (ionItemReorder)=\"doReorder($event, idx)\" disabled=\"false\">\n          <ion-item *ngFor=\"let swarm of group.swarms\" [routerLink]=\"['view', swarm.id]\">\n            <ion-reorder slot=\"start\">\n              <div class=\"reorder\">\n                <status-indicator [colonyId]=\"swarm.id\" [isNucleus]=\"swarm.isNucleus\"></status-indicator>\n              </div>\n            </ion-reorder>\n            <ion-label>\n              {{ swarm.name }}\n              <span class=\"small-preview\" *ngIf=\"swarm.lastAction as entry; else noActionYet\">\n                <br />\n                <strong>{{ entry.date | date:'dd. MMM'}}: </strong>\n                {{ 'ACTIONS.' + entry.type | translate }}\n              </span>\n              <ng-template #noActionYet>\n                <br />\n                <span class=\"small-preview\">{{\"JOURNAL_PAGE.noTrackedActivity\" | translate}}</span>\n              </ng-template>\n            </ion-label>\n          </ion-item>\n        </ion-reorder-group>\n        <ion-item class=\"green-bg\">\n          <app-group-action-bar\n            [group]=\"group\"\n            (changeEvent)=\"loadSwarms()\"\n            (addSwarmEvent)=\"createSwarm($event)\"\n            (deleteGroupEvent)=\"loadSwarms()\"\n          ></app-group-action-bar>\n        </ion-item>\n      </ion-list>\n    </ng-container>\n\n    <div class=\"controls-container\">\n      <ion-buttons class=\"ion-padding-horizontal\">\n        <ion-fab-button\n          class=\"addGroupButton\"\n          slot=\"end\"\n          color=\"primary\"\n          (click)=\"editSwarmGroup()\"\n          data-test-id=\"add-colony-group\"\n        >\n          <ion-icon name=\"duplicate-outline\"></ion-icon>\n        </ion-fab-button>\n      </ion-buttons>\n    </div>\n  </ng-container>\n</ion-content>\n","import { Component, ViewChild } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { AlertController, IonReorderGroup, LoadingController } from \"@ionic/angular\";\nimport { ItemReorderEventDetail } from \"@ionic/core\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { differenceInMilliseconds } from \"date-fns\";\nimport { forkJoin, Observable, of } from \"rxjs\";\nimport { first, map, switchMap, tap } from \"rxjs/operators\";\nimport { AnimationService } from \"src/app/services/animation.service\";\nimport { AppreviewService } from \"src/app/services/appreview.service\";\nimport { JournalService } from \"src/app/services/journal.service\";\nimport { PurchaseService } from \"src/app/services/purchase.service\";\nimport { Reminder, ReminderService } from \"src/app/services/reminder.service\";\nimport { StatusService } from \"src/app/services/status.service\";\nimport { LocalStorageKey, StorageSyncService } from \"src/app/services/storage-sync.service\";\nimport { SwarmGroup, SwarmGroupService } from \"src/app/services/swarm-group.service\";\nimport { SwarmService } from \"src/app/services/swarm.service\";\nimport { JournalEntry } from \"src/app/types/JournalEntry\";\nimport { Swarm } from \"src/app/types/Swarm\";\n\nexport interface UISwarmGroup {\n  id: string;\n  name: string;\n  swarms: Swarm[];\n  lat?: number;\n  lng?: number;\n  reminders?: Reminder[];\n}\n\n@Component({\n  selector: \"app-swarms\",\n  templateUrl: \"./swarms.page.html\",\n  styleUrls: [\"./swarms.page.scss\"],\n})\nexport class SwarmsPage {\n  sortedSwarmGroups: UISwarmGroup[] = null;\n  userId: string;\n  @ViewChild(IonReorderGroup) reorderGroup: IonReorderGroup;\n  translation: any;\n\n  constructor(\n    private swarmService: SwarmService,\n    private journalService: JournalService,\n    private alertCtrl: AlertController,\n    private loadingController: LoadingController,\n    private statusService: StatusService,\n    private swarmGroupService: SwarmGroupService,\n    private translate: TranslateService,\n    private purchases: PurchaseService,\n    private animationService: AnimationService,\n    private router: Router,\n    private appreview: AppreviewService,\n    private storageSync: StorageSyncService,\n    private reminderService: ReminderService\n  ) {}\n\n  async forceReloadSwarms(event) {\n    await this.storageSync.clearStorage();\n    await this.loadSwarms();\n    event.target.complete();\n  }\n\n  async loadSwarms() {\n    let loading = null;\n\n    // Show spinner only if not loaded from local storage, which\n    // is so fast a spinner would just flicker shortly.\n    if (!(await this.storageSync.getFromStorage(LocalStorageKey.SWARMS))) {\n      loading = await this.loadingController.create({\n        message: this.translate.instant(\"COLONIES_PAGE.loading\"),\n        showBackdrop: true,\n      });\n\n      loading && (await loading.present());\n    }\n\n    const start = new Date();\n    this.swarmService\n      .getSwarms()\n      .pipe(\n        first(),\n        tap((swarms: Swarm[]) => {\n          console.log(`${differenceInMilliseconds(new Date(), start)} later`);\n          this.appreview.checkReview(swarms);\n        }),\n        switchMap((swarms: Swarm[]) => {\n          console.log(`${differenceInMilliseconds(new Date(), start)} later (app review done)`);\n          return this.groupSwarms(swarms);\n        }),\n        tap((groups: UISwarmGroup[]) => {\n          console.log(`${differenceInMilliseconds(new Date(), start)} later (grouping done)`);\n\n          if (this._groupsDiffer(this.sortedSwarmGroups, groups)) {\n            this.sortedSwarmGroups = groups;\n          }\n\n          if (this.sortedSwarmGroups.length === 0) {\n            this.animationService.pulse(\".addGroupButton\", 5);\n            this.animationService.pulse(\".bee\", 5);\n          }\n        }),\n        switchMap(() => {\n          console.log(`${differenceInMilliseconds(new Date(), start)} later (group diff check)`);\n          return this.loadJournalEntries();\n        }),\n        switchMap(() => {\n          console.log(`${differenceInMilliseconds(new Date(), start)} later (entries)`);\n          return this.loadGroupReminders();\n        })\n      )\n      .subscribe(\n        () => {\n          console.log(`${differenceInMilliseconds(new Date(), start)} later (reminders)`);\n          loading && loading.dismiss();\n        },\n        (err) => {\n          loading && loading.dismiss();\n          console.log(\"ERROR\", err);\n        }\n      );\n  }\n\n  loadGroupReminders() {\n    return this.reminderService.getReminders().pipe(\n      first(),\n      tap((rs: Reminder[]) => {\n        for (let group of this.sortedSwarmGroups) {\n          const rems = rs.filter((r) => r.groupId === group.id);\n          rems.sort((r1, r2) => (r1.date < r2.date ? -1 : 1));\n          group.reminders = rems;\n        }\n      })\n    );\n  }\n\n  private loadJournalEntries(): Observable<unknown> {\n    let journalUpdates = [];\n    for (let group of this.sortedSwarmGroups) {\n      group.swarms.forEach((sw: Swarm) => {\n        journalUpdates.push(\n          this.journalService.getDigest(sw.id).pipe(\n            tap((e: JournalEntry[]) => {\n              if (e && e.length > 0) {\n                sw.lastAction = e[0];\n                sw.statusInfo = this.statusService.getColonyStatus(e);\n              }\n            })\n          )\n        );\n      });\n    }\n\n    if (journalUpdates.length === 0) {\n      return of([]);\n    }\n\n    return forkJoin(journalUpdates);\n  }\n\n  groupSwarms(swarms: Swarm[]): Observable<UISwarmGroup[]> {\n    return this.swarmGroupService.getGroups().pipe(\n      map((groups: SwarmGroup[]) => {\n        let swarmsById = new Map<string, Swarm>();\n        swarms.forEach((s) => {\n          swarmsById.set(s.id, s);\n        });\n\n        let displayGroups: UISwarmGroup[] = [];\n\n        groups.forEach((g) => {\n          let displayGroup: UISwarmGroup = {\n            id: g.id,\n            name: g.name,\n            swarms: [],\n            lat: g.lat,\n            lng: g.lng,\n          };\n\n          (g.swarmIds || []).forEach((sid) => {\n            const swarm = swarmsById.get(sid);\n            if (swarm) {\n              displayGroup.swarms.push(swarm);\n            }\n          });\n\n          displayGroups.push(displayGroup);\n        });\n\n        return displayGroups;\n      })\n    );\n  }\n\n  ionViewDidEnter() {\n    this.loadSwarms();\n  }\n\n  async editSwarmGroup(groupId?: string) {\n    const existing = groupId && this.sortedSwarmGroups.filter((g) => g.id === groupId)[0];\n    const alert = await this.alertCtrl.create({\n      header: this.translate.instant(existing ? \"COLONIES_PAGE.editGroupName\" : \"COLONIES_PAGE.newColonyGroup\"),\n      inputs: [\n        {\n          name: \"name\",\n          type: \"text\",\n          value: existing?.name,\n          placeholder: this.translate.instant(\"COLONIES_PAGE.namePlaceholder\"),\n        },\n      ],\n      buttons: [\n        {\n          text: this.translate.instant(\"GENERAL.cancel\"),\n          role: \"cancel\",\n          cssClass: \"secondary\",\n        },\n        {\n          text: existing ? this.translate.instant(\"GENERAL.save\") : this.translate.instant(\"COLONIES_PAGE.createGroup\"),\n          handler: (value) => {\n            const name = value.name.trim();\n            if (name) {\n              let action;\n              if (existing) {\n                action = this.swarmGroupService.updateGroup({\n                  id: existing.id,\n                  name,\n                  swarmIds: existing.swarms.map((s) => s.id),\n                });\n              } else {\n                action = this.swarmGroupService.createGroup(name);\n              }\n\n              action.subscribe(\n                () => {\n                  this.loadSwarms();\n                },\n                (err) => {\n                  this.onCreationFailure(err);\n                }\n              );\n            } else {\n              this.onCreationFailure(this.translate.instant(\"COLONIES_PAGE.chooseValidName\"));\n            }\n          },\n        },\n      ],\n    });\n\n    await alert.present().then(() => {\n      const el: any = document.querySelector(\"ion-alert input\");\n      el.focus();\n    });\n  }\n\n  async createSwarm(groupId: string) {\n    if (this.purchases.checkLimitReached(this._getNumberOfSwarms())) {\n      this.requireFullVersion();\n      return;\n    }\n\n    this.router.navigateByUrl(`/swarms/edit?groupId=${groupId}`);\n  }\n\n  async onCreationFailure(msg: string) {\n    const alert = await this.alertCtrl.create({\n      header: this.translate.instant(\"COLONIES_PAGE.createGroupFailed\"),\n      message: msg,\n      buttons: [\"OK\"],\n    });\n\n    await alert.present();\n  }\n\n  async doReorder(ev: CustomEvent<ItemReorderEventDetail>, groupIdx: number) {\n    const fromIdx = ev.detail.from;\n    const toIdx = ev.detail.to;\n\n    const group = this.sortedSwarmGroups[groupIdx];\n\n    if (fromIdx > toIdx) {\n      group.swarms.splice(toIdx, 0, group.swarms[fromIdx]);\n      group.swarms.splice(fromIdx + 1, 1);\n    } else {\n      group.swarms.splice(toIdx + 1, 0, group.swarms[fromIdx]);\n      group.swarms.splice(fromIdx, 1);\n    }\n    ev.detail.complete();\n\n    const loading = await this.loadingController.create({\n      message: this.translate.instant(\"COLONIES_PAGE.updatingSpinner\"),\n      showBackdrop: true,\n    });\n    await loading.present();\n\n    this.swarmGroupService\n      .updateGroup({\n        id: group.id,\n        name: group.name,\n        swarmIds: group.swarms.map((s) => s.id),\n      })\n      .subscribe(() => {\n        this.loadSwarms()\n          .then(() => {\n            loading.dismiss();\n          })\n          .catch(console.error);\n      });\n  }\n\n  async requireFullVersion() {\n    const hint = await this.alertCtrl.create({\n      header: this.translate.instant(\"COLONIES_PAGE.fullVersionRequiredDialogHeader\"),\n      message: this.translate.instant(\"COLONIES_PAGE.fullVersionRequiredDialogText\"),\n      buttons: [\n        {\n          text: this.translate.instant(\"GENERAL.ok\"),\n        },\n      ],\n    });\n\n    hint.present();\n  }\n\n  private _getNumberOfSwarms() {\n    let num = 0;\n    for (let group of this.sortedSwarmGroups) {\n      num += group.swarms.length;\n    }\n    return num;\n  }\n\n  private _groupsDiffer(oldGroups: UISwarmGroup[], newGroups: UISwarmGroup[]) {\n    if (!oldGroups || !newGroups || oldGroups.length !== newGroups.length) {\n      return true;\n    }\n\n    for (let i = 0; i < oldGroups.length; i++) {\n      const og = oldGroups[i];\n      const ng = newGroups[i];\n\n      if (og.swarms.length !== ng.swarms.length || og.name !== ng.name || og.lat !== ng.lat || og.lng !== ng.lng) {\n        return true;\n      }\n\n      for (let j = 0; j < og.swarms.length; j++) {\n        if (\n          og.swarms[j].id !== ng.swarms[j].id ||\n          og.swarms[j].name !== ng.swarms[j].name ||\n          og.swarms[j].isNucleus !== ng.swarms[j].isNucleus\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { SwarmsPage } from \"./swarms.page\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SwarmsPage,\n  },\n  {\n    path: \"view/:swarmId\",\n    loadChildren: () =>\n      import(\"./swarm-detail/swarm-detail.module\").then(\n        (m) => m.SwarmDetailPageModule\n      ),\n  },\n  {\n    path: \"edit\",\n    loadChildren: () =>\n      import(\"./swarm-edit/swarm-edit.module\").then(\n        (m) => m.SwarmEditPageModule\n      ),\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SwarmsPageRoutingModule {}\n","<ion-item class=\"ion-text-center groupHeading\">\n  <ion-label (click)=\"group.id && rename(group.id)\">\n    <strong> {{ group.name }} </strong><br />\n    <span *ngIf=\"group.swarms && group.swarms.length === 0\" class=\"small-preview\">\n      {{ \"COLONIES_PAGE.emptyGroupHint\" | translate }}\n      <br />\n    </span>\n    <span *ngIf=\"group.lat && group.lng\" class=\"small-preview\">\n      Lat: {{ group.lat | number: \".1-4\" }} Lng:\n      {{ group.lng | number: \".1-4\" }}\n    </span>\n  </ion-label>\n</ion-item>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { UISwarmGroup } from \"src/app/pages/swarms/swarms.page\";\n\n@Component({\n  selector: \"app-group-header\",\n  templateUrl: \"./group-header.component.html\",\n  styleUrls: [\"./group-header.component.scss\"],\n})\nexport class GroupHeaderComponent implements OnInit {\n  @Input() idx: number;\n  @Input() group: UISwarmGroup;\n  @Output() renameEvent = new EventEmitter<string>();\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  rename(gid: string) {\n    this.renameEvent.emit(gid);\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { isSameDay, startOfDay } from \"date-fns\";\nimport { Observable, of } from \"rxjs\";\nimport { map, tap } from \"rxjs/operators\";\n\nconst API_KEY = \"09b7c89a1945dc1168a4d50a97ffd24d\";\n\nexport enum WeatherType {\n  CLEAR = \"Clear\",\n  RAIN = \"Rain\",\n  CLOUDS = \"Clouds\",\n  SNOW = \"Snow\",\n}\n\nexport interface Weather {\n  main: WeatherType;\n}\n\nexport interface CurrentData {\n  dt: number;\n  date?: Date;\n  temp: number;\n  weather: Weather[];\n}\n\nexport interface ForecastData {\n  dt: number;\n  date?: Date;\n  temp: {\n    min: number;\n    max: number;\n  };\n  weather: Weather[];\n}\n\nexport interface Forecast {\n  current: CurrentData;\n  daily: ForecastData[];\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class WeatherService {\n  constructor(private http: HttpClient) {}\n\n  private cache = new Map<string, Forecast>();\n\n  getForecast(lat: number, lng: number): Observable<Forecast> {\n    const cacheKey = lat + \"_\" + lng;\n    const cachedValue = this.cache.get(cacheKey);\n    if (cachedValue && isSameDay(cachedValue.current.date, startOfDay(new Date()))) {\n      return of(cachedValue);\n    }\n\n    return this.http\n      .get<Forecast>(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${API_KEY}&units=metric&exclude=hourly,minutely,alerts`\n      )\n      .pipe(\n        map((fc: Forecast) => {\n          fc.daily.forEach((d) => {\n            d.date = new Date(d.dt * 1000);\n            d.temp.min = Math.round(d.temp.min);\n            d.temp.max = Math.round(d.temp.max);\n          });\n\n          fc.current.date = new Date(fc.current.dt * 1000);\n          return fc;\n        }),\n        tap((fc: Forecast) => {\n          this.cache.set(cacheKey, fc);\n          return fc;\n        })\n      );\n  }\n}\n","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day (and year and month)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","<ion-item class=\"ion-text-center forecast\">\n  <ng-container *ngIf=\"forecast$ | async as forecast\">\n    <div class=\"forecastDay\" *ngFor=\"let fc of forecast.daily\">\n      <div class=\"dayHeader\">{{ fc.date | date: \"E\":\"de\" }}</div>\n      <div *ngIf=\"fc.weather[0].main === weatherType.CLEAR\">\n        <ion-icon class=\"sunny\" name=\"sunny\"></ion-icon>\n      </div>\n      <div *ngIf=\"fc.weather[0].main === weatherType.CLOUDS\">\n        <ion-icon class=\"cloudy\" name=\"cloud-outline\"></ion-icon>\n      </div>\n      <div *ngIf=\"fc.weather[0].main === weatherType.RAIN\">\n        <ion-icon class=\"rainy\" name=\"rainy-outline\"></ion-icon>\n      </div>\n      <div *ngIf=\"fc.weather[0].main === weatherType.SNOW\">\n        <ion-icon class=\"snowy\" name=\"snow-outline\"></ion-icon>\n      </div>\n      <div [ngClass]=\"{ danger: fc.temp.max < 0 || fc.temp.max > 30 }\">{{ fc.temp.max }}°</div>\n      <div [ngClass]=\"{ danger: fc.temp.min < 0 || fc.temp.min > 30 }\">{{ fc.temp.min }}°</div>\n    </div>\n  </ng-container>\n</ion-item>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { AnimationService } from \"src/app/services/animation.service\";\nimport { Forecast, WeatherService, WeatherType } from \"src/app/services/weather.service\";\n\n@Component({\n  selector: \"app-weather-forecast\",\n  templateUrl: \"./weather-forecast.component.html\",\n  styleUrls: [\"./weather-forecast.component.scss\"],\n})\nexport class WeatherForecastComponent implements OnInit {\n  @Input() lat: number;\n  @Input() lng: number;\n  forecast$: Observable<Forecast>;\n  weatherType = WeatherType;\n\n  constructor(private weatherService: WeatherService, private animationService: AnimationService) {}\n\n  ngOnInit() {\n    this.forecast$ = this.weatherService.getForecast(this.lat, this.lng);\n    this.animationService.rotate(\".sunny\", Infinity);\n    this.animationService.rotate(\".snowy\", Infinity);\n  }\n}\n","<div *ngIf=\"varroaInfo\">\n  <div *ngIf=\"varroaInfo.status === 'HIGH'\" class=\"red\">\n    <div class=\"varroaNumber\" [ngClass]=\"{ 'text-small': varroaInfo.average > 9 }\">\n      {{ varroaInfo.average }}\n    </div>\n    <div class=\"varroaMite\">\n      <mite [color]=\"'filterRed'\" size=\"small\"></mite>\n    </div>\n    <div class=\"text-small annotation\">p.d.</div>\n  </div>\n  <div *ngIf=\"varroaInfo.status === 'MEDIUM'\" class=\"orange\">\n    <div class=\"varroaNumber\" [ngClass]=\"{ 'text-small': varroaInfo.average > 9 }\">\n      {{ varroaInfo.average }}\n    </div>\n    <div class=\"varroaMite\">\n      <mite [color]=\"'filterOrange'\" size=\"small\"></mite>\n    </div>\n    <div class=\"text-small annotation\">p.d.</div>\n  </div>\n\n  <div *ngIf=\"varroaInfo.status === 'OK' && isNucleus\">🐝</div>\n  <div *ngIf=\"varroaInfo.status === 'OK' && !isNucleus\" class=\"healthy\">🐝🐝</div>\n</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { differenceInHours } from \"date-fns\";\nimport { tap } from \"rxjs/operators\";\nimport { JournalService } from \"src/app/services/journal.service\";\nimport { ColonyAggression, QueenHealth, VarroaStatus } from \"src/app/types/ColonyStatus\";\nimport { EntryType } from \"src/app/types/EntryType\";\nimport { JournalEntry } from \"src/app/types/JournalEntry\";\n\ninterface VarroaInfo {\n  status: VarroaStatus;\n  average: number;\n}\n\n@Component({\n  selector: \"status-indicator\",\n  templateUrl: \"./status-indicator.component.html\",\n  styleUrls: [\"./status-indicator.component.scss\"],\n})\nexport class StatusIndicatorComponent implements OnInit {\n  @Input() colonyId: string;\n  @Input() isNucleus: boolean;\n  varroaInfo: VarroaInfo;\n  queenHealth: QueenHealth;\n  aggression: ColonyAggression;\n\n  constructor(private journalService: JournalService, private routerActive: ActivatedRoute, private router: Router) {}\n\n  ngOnInit() {\n    this.refresh();\n\n    this.routerActive.paramMap.subscribe(() => {\n      if (this.router.url === \"/swarms\") {\n        this.refresh();\n      }\n    });\n  }\n\n  refresh() {\n    this.journalService\n      .getDigest(this.colonyId)\n      .pipe(\n        tap((entries: JournalEntry[]) => {\n          this.varroaInfo = this._determineVarroaInfo(entries);\n          this.queenHealth = this._determineQueenHealth(entries);\n          this.aggression = this._determineAggression(entries);\n        })\n      )\n      .subscribe();\n  }\n\n  private _determineVarroaInfo(entries: JournalEntry[]): VarroaInfo {\n    let varroaEnd;\n    for (let entry of entries) {\n      if (entry.type === EntryType.VARROA_CHECK_END) {\n        varroaEnd = entry;\n      } else if (entry.type === EntryType.VARROA_CHECK_START && varroaEnd) {\n        let varroaAvg = varroaEnd.amount\n          ? +varroaEnd.amount / ((differenceInHours(varroaEnd.date, new Date(entry.date)) || 1) / 24)\n          : 0;\n        return {\n          average: Math.round(varroaAvg),\n          status: this._getVarroaStatusForTimeOfYear(varroaAvg),\n        };\n      }\n    }\n    return { average: 0, status: VarroaStatus.OK };\n  }\n\n  private _determineQueenHealth(entries: JournalEntry[]): QueenHealth {\n    return QueenHealth.EXCELLENT;\n  }\n\n  private _determineAggression(entries: JournalEntry[]): ColonyAggression {\n    return ColonyAggression.SUPER_AGGRESSIVE;\n  }\n\n  private _getVarroaStatusForTimeOfYear(avg: number) {\n    if (avg > 10) {\n      return VarroaStatus.HIGH;\n    } else if (avg > 5) {\n      return VarroaStatus.MEDIUM;\n    } else {\n      return VarroaStatus.OK;\n    }\n  }\n}\n","<ion-buttons>\n  <ion-fab-button [id]=\"'addButton' + group.id\" size=\"small\" slot=\"end\" color=\"primary\" (click)=\"addNewSwarm()\">\n    <ion-icon name=\"cube-outline\" class=\"double-icon-left\"></ion-icon>\n    <ion-icon name=\"add\" class=\"double-icon-right\"></ion-icon>\n  </ion-fab-button>\n  <ion-fab-button [routerLink]=\"'/reminders'\" [queryParams]=\"{ groupId: group.id }\" size=\"small\">\n    <ion-icon name=\"alarm-outline\"></ion-icon>\n  </ion-fab-button>\n  <ion-fab-button *ngIf=\"group.swarms.length > 0\" size=\"small\" slot=\"end\" color=\"primary\" (click)=\"startDiagnosis()\">\n    <ion-icon name=\"bug-outline\" class=\"double-icon-left\"></ion-icon>\n    <ion-icon name=\"help-outline\" class=\"double-icon-right\"></ion-icon>\n  </ion-fab-button>\n  <ion-fab-button *ngIf=\"group.swarms.length > 0\" size=\"small\" slot=\"end\" color=\"primary\" (click)=\"startTreatment()\">\n    <ion-icon name=\"eyedrop-outline\"></ion-icon>\n  </ion-fab-button>\n  <ion-fab-button size=\"small\" slot=\"end\" color=\"primary\" (click)=\"setLocation()\">\n    <ion-icon name=\"location-outline\"></ion-icon>\n  </ion-fab-button>\n  <ion-fab-button\n    *ngIf=\"group.swarms.length === 0\"\n    size=\"small\"\n    color=\"danger\"\n    (click)=\"deleteGroup()\"\n    data-test-id=\"deleteGroupAction\"\n  >\n    <ion-icon name=\"close-circle-outline\"></ion-icon>\n  </ion-fab-button>\n</ion-buttons>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { AlertController, LoadingController } from \"@ionic/angular\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { forkJoin, Observable } from \"rxjs\";\nimport { UISwarmGroup } from \"src/app/pages/swarms/swarms.page\";\nimport { AnimationService } from \"src/app/services/animation.service\";\nimport { JournalService } from \"src/app/services/journal.service\";\nimport { SwarmGroupService } from \"src/app/services/swarm-group.service\";\nimport { EntryType } from \"src/app/types/EntryType\";\nimport { Swarm } from \"src/app/types/Swarm\";\n\n@Component({\n  selector: \"app-group-action-bar\",\n  templateUrl: \"./group-action-bar.component.html\",\n  styleUrls: [\"./group-action-bar.component.scss\"],\n})\nexport class GroupActionBarComponent implements OnInit {\n  @Input() group: UISwarmGroup;\n  @Output() addSwarmEvent = new EventEmitter<string>();\n  @Output() changeEvent = new EventEmitter<string>();\n  @Output() deleteGroupEvent = new EventEmitter<string>();\n\n  constructor(\n    private groupService: SwarmGroupService,\n    private journalService: JournalService,\n    private alertCtrl: AlertController,\n    private translate: TranslateService,\n    private loadingCtrl: LoadingController,\n    private animationService: AnimationService\n  ) {}\n\n  ngOnInit() {\n    if (this.group.swarms.length === 0) {\n      this.animationService.pulse(\"#addButton\" + this.group.id, 3);\n    }\n  }\n\n  addNewSwarm() {\n    this.addSwarmEvent.emit(this.group.id);\n  }\n\n  deleteGroup() {\n    this.groupService.deleteGroup(this.group.id).subscribe(() => {\n      this.deleteGroupEvent.emit();\n    });\n  }\n\n  async setLocation() {\n    const alert = await this.alertCtrl.create({\n      header: this.translate.instant(\"COLONIES_PAGE.setLocationDialogHeader\"),\n      message: this.translate.instant(\"COLONIES_PAGE.setLocationDialogMsg\"),\n      buttons: [\n        {\n          text: this.translate.instant(\"GENERAL.cancel\"),\n          role: \"cancel\",\n        },\n        {\n          text: this.translate.instant(\"GENERAL.ok\"),\n          handler: async () => {\n            const loading = await this.loadingCtrl.create({\n              message: this.translate.instant(\"COLONIES_PAGE.localizing\"),\n              showBackdrop: true,\n            });\n            await loading.present();\n\n            this.groupService\n              .setLocation(this.group)\n              .then(() => {\n                loading.dismiss();\n                this.changeEvent.emit();\n              })\n              .catch((err) => {\n                loading.dismiss();\n                this.onSetLocationError(err);\n              });\n          },\n        },\n      ],\n    });\n\n    await alert.present();\n  }\n\n  async onSetLocationError(err) {\n    const alert = await this.alertCtrl.create({\n      header: this.translate.instant(\"COLONIES_PAGE.errorGeolocation\"),\n      message: \"\" + err,\n      buttons: [\n        {\n          text: this.translate.instant(\"GENERAL.ok\"),\n          role: \"cancel\",\n        },\n      ],\n    });\n\n    alert.present();\n  }\n\n  async startTreatment() {\n    const alert = await this.alertCtrl.create({\n      header: this.translate.instant(\"COLONIES_PAGE.startTreatmentDialogHeader\"),\n      message: this.translate.instant(\"COLONIES_PAGE.startTreatmentDialogMsg\"),\n      buttons: [\n        {\n          text: this.translate.instant(\"GENERAL.cancel\"),\n          role: \"cancel\",\n        },\n        {\n          text: this.translate.instant(\"GENERAL.ok\"),\n          handler: () => {\n            const entries: Observable<any>[] = [];\n            this.group.swarms.forEach((s: Swarm) => {\n              entries.push(\n                this.journalService.createEntry(s.id, {\n                  date: new Date(),\n                  type: EntryType.VARROA_TREATMENT,\n                })\n              );\n            });\n\n            forkJoin(entries).subscribe(() => {\n              this.changeEvent.emit();\n            });\n          },\n        },\n      ],\n    });\n\n    await alert.present();\n  }\n\n  async startDiagnosis() {\n    const alert = await this.alertCtrl.create({\n      header: this.translate.instant(\"COLONIES_PAGE.startDiagnosisDialogHeader\"),\n      message: this.translate.instant(\"COLONIES_PAGE.startDiagnosisDialogMsg\"),\n      buttons: [\n        {\n          text: this.translate.instant(\"GENERAL.cancel\"),\n          role: \"cancel\",\n        },\n        {\n          text: this.translate.instant(\"GENERAL.ok\"),\n          handler: () => {\n            const entries: Observable<any>[] = [];\n            this.group.swarms.forEach((s: Swarm) => {\n              entries.push(\n                this.journalService.createEntry(s.id, {\n                  date: new Date(),\n                  type: EntryType.VARROA_CHECK_START,\n                })\n              );\n            });\n\n            forkJoin(entries).subscribe(() => {\n              this.changeEvent.emit();\n            });\n          },\n        },\n      ],\n    });\n\n    await alert.present();\n  }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { IonicModule } from \"@ionic/angular\";\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { SharedModule } from \"src/app/shared/shared.module\";\nimport { SwarmsPageRoutingModule } from \"./swarms-routing.module\";\nimport { SwarmsPage } from \"./swarms.page\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SwarmsPageRoutingModule,\n    SharedModule,\n    TranslateModule,\n  ],\n  declarations: [SwarmsPage],\n})\nexport class SwarmsPageModule {}\n","import { Injectable } from \"@angular/core\";\nimport { Database, endAt, listVal, objectVal, remove, startAt } from \"@angular/fire/database\";\nimport { limitToLast, orderByChild, push, query, ref, update } from \"firebase/database\";\nimport { from, Observable, of } from \"rxjs\";\nimport { first, map, switchMap, take, tap } from \"rxjs/operators\";\nimport { AuthService } from \"../pages/auth/auth.service\";\nimport { JournalEntry } from \"../types/JournalEntry\";\nimport { LocalStorageKey, StorageSyncService } from \"./storage-sync.service\";\n\ninterface QueryConfig {\n  limit?: number;\n  startAt?: string;\n  endAt?: string;\n}\n\nconst DIGEST_SIZE = 20;\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class JournalService {\n  private entryCacheForColony = new Map<string, JournalEntry[]>();\n\n  constructor(private db: Database, private authService: AuthService, private storageSync: StorageSyncService) {}\n\n  getDigest(swarmId: string) {\n    return from(this.storageSync.getFromStorage(LocalStorageKey.JOURNAL_ENTRIES, swarmId)).pipe(\n      switchMap((entries) => {\n        if (entries) {\n          return of(entries);\n        } else {\n          return this.getEntries(swarmId, { limit: DIGEST_SIZE }).pipe(\n            tap((entries) => {\n              this.storageSync.writeToStorage(LocalStorageKey.JOURNAL_ENTRIES, entries, swarmId);\n            })\n          );\n        }\n      })\n    );\n  }\n\n  getEntries(swarmId: string, config: QueryConfig = {}): Observable<JournalEntry[]> {\n    const startAtDate = config.startAt || \"2000-01-01\";\n    const endAtDate = config.endAt || \"2050-12-31\";\n    const limit = config.limit || 1000;\n\n    const cacheKey = `${swarmId}_${startAtDate}_${endAtDate}_${limit}`;\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        const cached = this.entryCacheForColony.get(cacheKey);\n\n        if (cached) {\n          return of(cached);\n        }\n\n        const entries = listVal(\n          query(\n            ref(this.db, `/users/${user.uid}/journals/${swarmId}/entries`),\n            orderByChild(\"date\"),\n            startAt(startAtDate),\n            endAt(endAtDate),\n            limitToLast(limit)\n          ),\n          {\n            keyField: \"id\",\n          }\n        ).pipe(\n          take(1),\n          map((data: any[]) => {\n            if (!data) {\n              return [];\n            }\n\n            const entries: JournalEntry[] = [];\n            for (let i = 0; i < data.length; i++) {\n              const item: any = data[i];\n              entries.unshift({\n                ...item,\n                date: new Date(item.date),\n              });\n            }\n\n            entries.sort((a, b) => {\n              return a.date < b.date ? 1 : -1;\n            });\n\n            return limit > -1 ? entries.splice(0, limit) : entries;\n          })\n        );\n        return entries;\n      }),\n      tap((entries: JournalEntry[]) => {\n        this.entryCacheForColony.set(cacheKey, entries);\n      })\n    );\n  }\n\n  getEntry(swarmId: string, entryId: string): Observable<JournalEntry> {\n    return this.authService.getUser().pipe(\n      first(),\n      switchMap((user) => {\n        return objectVal(ref(this.db, `/users/${user.uid}/journals/${swarmId}/entries/${entryId}`), {\n          keyField: \"id\",\n        }).pipe(\n          map((entry: any) => {\n            if (!entry) {\n              return null;\n            }\n\n            return {\n              id: entry.id,\n              text: entry.text,\n              type: entry.type,\n              date: new Date(entry.date),\n              amount: entry.amount,\n            };\n          })\n        );\n      })\n    );\n  }\n\n  createEntry(swarmId: string, entry: JournalEntry): Observable<any> {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        this.clearCacheForColony(swarmId);\n\n        const fbEntry = this.convertToFirebaseEntry(entry);\n        return push(ref(this.db, `/users/${user.uid}/journals/${swarmId}/entries`), fbEntry);\n      })\n    );\n  }\n\n  updateEntry(swarmId: string, entry: JournalEntry) {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        this.clearCacheForColony(swarmId);\n\n        const fbEntry = this.convertToFirebaseEntry(entry);\n\n        return update(ref(this.db, `/users/${user.uid}/journals/${swarmId}/entries/${fbEntry.id}`), fbEntry);\n      })\n    );\n  }\n\n  deleteEntry(swarmId: string, id: string) {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        this.clearCacheForColony(swarmId);\n\n        if (!id) {\n          console.error(\"Delete without ID\");\n          return;\n        }\n\n        return remove(ref(this.db, `/users/${user.uid}/journals/${swarmId}/entries/${id}`));\n      })\n    );\n  }\n\n  private clearCacheForColony(colonyId: string) {\n    const deletable = [];\n    for (let k of this.entryCacheForColony.keys()) {\n      if (k.startsWith(colonyId)) {\n        deletable.push(k);\n      }\n    }\n    deletable.forEach((d) => this.entryCacheForColony.delete(d));\n    this.storageSync.clearFromStorage(LocalStorageKey.JOURNAL_ENTRIES, colonyId);\n  }\n\n  private convertToFirebaseEntry(e: JournalEntry) {\n    const clone: any = { ...e };\n    clone.date = new Date(e.date).toISOString();\n    return clone;\n  }\n}\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nexport enum MiteColor {\n  WHITE = \"filterWhite\",\n  ORANGE = \"filterOrange\",\n  RED = \"filterRed\",\n}\n\nexport enum MiteSize {\n  large = \"large\",\n  small = \"small\",\n}\n\n@Component({\n  selector: \"mite\",\n  template:\n    '<ion-img [ngClass]=\"[color, size]\" src=\"assets/img/mite.png\"></ion-img>',\n  styleUrls: [\"./mite.component.scss\"],\n})\nexport class MiteComponent implements OnInit {\n  @Input() color: MiteColor = MiteColor.WHITE;\n  @Input() size: MiteSize = MiteSize.large;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { AlertController, ToastController } from \"@ionic/angular\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { Reminder, ReminderService } from \"src/app/services/reminder.service\";\n\n@Component({\n  selector: \"app-reminder-item\",\n  templateUrl: \"./reminder-item.component.html\",\n  styleUrls: [\"./reminder-item.component.scss\"],\n})\nexport class ReminderItemComponent implements OnInit {\n  @Input() reminder: Reminder;\n  @Output() notifyChange = new EventEmitter<string>();\n\n  constructor(\n    private alertCtrl: AlertController,\n    private reminderService: ReminderService,\n    private translate: TranslateService,\n    private toastController: ToastController\n  ) {}\n\n  ngOnInit() {}\n\n  async delete() {\n    const alert = await this.alertCtrl.create({\n      header: this.translate.instant(\"REMINDERS.deleteConfirmHeader\"),\n      buttons: [\n        {\n          text: this.translate.instant(\"GENERAL.cancel\"),\n          role: \"cancel\",\n          cssClass: \"secondary\",\n        },\n        {\n          text: this.translate.instant(\"GENERAL.delete\"),\n          handler: () => {\n            this.reminderService.deleteReminder(this.reminder).then(() => {\n              this.onReminderDismissed();\n              this.notifyChange.emit();\n            });\n          },\n        },\n      ],\n    });\n\n    await alert.present();\n  }\n\n  async onReminderDismissed() {\n    const toast = await this.toastController.create({\n      message: this.translate.instant(\"JOURNAL_PAGE.onReminderDismissal\"),\n      duration: 2000,\n    });\n\n    toast.present();\n  }\n}\n","<ion-item class=\"groupReminder\"\n  ><ion-icon slot=\"start\" name=\"alarm-outline\"></ion-icon>\n  <ion-label\n    class=\"ion-text-wrap\"\n    routerLink=\"/reminders\"\n    [queryParams]=\"{\n      reminderId: reminder.reminderId,\n      swarmId: reminder.swarmId || '',\n      groupId: reminder.groupId || ''\n    }\"\n  >\n    {{ reminder.date | date: \"dd. MMM\" }}: {{ reminder.text }}</ion-label\n  >\n  <ion-icon name=\"trash-outline\" (click)=\"delete()\"></ion-icon>\n</ion-item>\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { GroupActionBarComponent } from \"./group-action-bar/group-action-bar.component\";\nimport { GroupHeaderComponent } from \"./group-header-component/group-header.component\";\nimport { JournalEntryShortComponent } from \"./journal-entry-short/journal-entry-short.component\";\nimport { WeatherForecastComponent } from \"./weather-forecast/weather-forecast.component\";\nimport { CUSTOM_ELEMENTS_SCHEMA } from \"@angular/core\";\nimport { QueenColorComponent } from \"./queen-color/queen-color.component\";\nimport { ColonyDetailsCardComponent } from \"./colony-details-card/colony-details-card.component\";\nimport { CrownComponent } from \"./crown/crown.component\";\nimport { MiteComponent } from \"./mite/mite.component\";\nimport { StatusIndicatorComponent } from \"./status-indicator/status-indicator.component\";\nimport { RouterModule } from \"@angular/router\";\nimport { ReminderItemComponent } from \"./reminder-item/reminder-item.component\";\n\n@NgModule({\n  declarations: [\n    JournalEntryShortComponent,\n    GroupHeaderComponent,\n    GroupActionBarComponent,\n    WeatherForecastComponent,\n    QueenColorComponent,\n    ColonyDetailsCardComponent,\n    CrownComponent,\n    MiteComponent,\n    StatusIndicatorComponent,\n    ReminderItemComponent,\n  ],\n  imports: [CommonModule, TranslateModule, RouterModule],\n  exports: [\n    JournalEntryShortComponent,\n    GroupHeaderComponent,\n    GroupActionBarComponent,\n    WeatherForecastComponent,\n    QueenColorComponent,\n    ColonyDetailsCardComponent,\n    CrownComponent,\n    MiteComponent,\n    StatusIndicatorComponent,\n    ReminderItemComponent,\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SharedModule {}\n","export enum EntryType {\n  // all varroa actions\n  VARROA_CHECK_START = \"VARROA_CHECK_START\",\n  VARROA_CHECK_END = \"VARROA_CHECK_END\",\n\n  VARROA_TREATMENT = \"VARROA_TREATMENT\",\n\n  // all frame actions\n  FRAMES_HONEY_HARVESTED = \"FRAMES_HONEY_HARVESTED\",\n  FRAMES_DRONE_REMOVED = \"FRAMES_DRONE_REMOVED\",\n  FRAMES_DRONE_INSERTED = \"FRAMES_DRONE_INSERTED\",\n  FRAMES_EMPTY_PANEL_REMOVED = \"FRAMES_EMPTY_PANEL_REMOVED\",\n  FRAMES_EMPTY_PANEL_INSERTED = \"FRAMES_EMPTY_PANEL_INSERTED\",\n  FRAMES_EMPTY_COMBS_REMOVED = \"FRAMES_EMPTY_COMBS_REMOVED\",\n  FRAMES_EMPTY_COMBS_INSERTED = \"FRAMES_EMPTY_COMBS_INSERTED\",\n  FRAMES_BROOD_REMOVED = \"FRAMES_BROOD_REMOVED\",\n  FRAMES_BROOD_INSERTED = \"FRAMES_BROOD_INSERTED\",\n  FRAMES_FOOD_REMOVED = \"FRAMES_FOOD_REMOVED\",\n  FRAMES_FOOD_INSERTED = \"FRAMES_FOOD_INSERTED\",\n  FRAMES_STOREYS_ADDED = \"FRAMES_STOREYS_ADDED\",\n  FRAMES_STOREYS_REMOVED = \"FRAMES_STOREYS_REMOVED\",\n\n  FRAMES_BROOD_COUNTED = \"FRAMES_BROOD_COUNTED\", // not used yet\n\n  // all queen actions\n  QUEEN_SPOTTED = \"QUEEN_SPOTTED\",\n  QUEEN_ADDED = \"QUEEN_ADDED\",\n  QUEEN_DECEASED = \"QUEEN_DECEASED\",\n  QUEEN_EGGS_SPOTTED = \"QUEEN_EGGS_SPOTTED\",\n  QUEEN_CELL_SPOTTED = \"QUEEN_CELL_SPOTTED\",\n  QUEEN_CELL_REMOVED = \"QUEEN_CELL_REMOVED\",\n  COLONY_SWARMED = \"COLONY_SWARMED\",\n\n  // other actions\n  FOOD_ADDED = \"FOOD_ADDED\",\n  WEIGHT_MEASURED = \"WEIGHT_MEASURED\",\n  GOT_STUNG = \"GOT_STUNG\",\n  GENERAL_NOTE = \"GENERAL_NOTE\",\n}\n\nexport const actionsForType = {\n  queen: [\n    EntryType.QUEEN_SPOTTED,\n    EntryType.QUEEN_ADDED,\n    EntryType.QUEEN_DECEASED,\n    EntryType.QUEEN_EGGS_SPOTTED,\n    EntryType.QUEEN_CELL_SPOTTED,\n    EntryType.QUEEN_CELL_REMOVED,\n    EntryType.COLONY_SWARMED,\n  ],\n  varroa: [\n    EntryType.VARROA_CHECK_START,\n    EntryType.VARROA_CHECK_END,\n    EntryType.VARROA_TREATMENT,\n  ],\n  frames: [\n    EntryType.FRAMES_BROOD_INSERTED,\n    EntryType.FRAMES_BROOD_REMOVED,\n    EntryType.FRAMES_DRONE_INSERTED,\n    EntryType.FRAMES_DRONE_REMOVED,\n    EntryType.FRAMES_EMPTY_COMBS_INSERTED,\n    EntryType.FRAMES_EMPTY_COMBS_REMOVED,\n    EntryType.FRAMES_EMPTY_PANEL_INSERTED,\n    EntryType.FRAMES_EMPTY_PANEL_REMOVED,\n    EntryType.FRAMES_HONEY_HARVESTED,\n    EntryType.FRAMES_FOOD_INSERTED,\n    EntryType.FRAMES_FOOD_REMOVED,\n    EntryType.FRAMES_STOREYS_ADDED,\n    EntryType.FRAMES_STOREYS_REMOVED,\n  ],\n  other: [\n    EntryType.FOOD_ADDED,\n    EntryType.WEIGHT_MEASURED,\n    EntryType.GOT_STUNG,\n    EntryType.GENERAL_NOTE,\n  ],\n};\n"]}