{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-picker-column-internal_entry_js.08e64d731fbe6329.js","mappings":"2QASA,MAIMA,EAAuB,MAC3BC,YAAYC,IACVC,OAAiBC,KAAMF,GACvBE,KAAKC,WAAYC,OAAYF,KAAM,YAAa,GAChDA,KAAKG,aAAc,EACnBH,KAAKI,iBAAkB,EACvBJ,KAAKK,UAAW,EAIhBL,KAAKM,MAAQ,GAMbN,KAAKO,MAAQ,UAUbP,KAAKQ,cAAe,EACpBR,KAAKS,uBAAyB,CAACC,EAAQC,GAAS,KAC9C,MAAQC,KAAIR,mBAAoBJ,KAChC,GAAII,EAAiB,CAEnB,MAAMS,EAAMH,EAAOI,UAAY,EAAIJ,EAAOK,aAAeL,EAAOK,aAAe,EAC3EH,EAAGI,YAAcH,GACnBD,EAAGK,OAAO,CACRJ,MACAK,KAAM,EACNC,SAAUR,EAAS,cAAWS,MAUtCpB,KAAKqB,gBAAmBC,IACtB,IAAKtB,KAAKQ,aACR,OAEF,MAAQe,eAAcC,mBAAoBF,EAAGG,OAO3CzB,KAAK0B,sBADFH,QADsCH,IAApBI,GAAiCA,IAAoBxB,KAAKY,IAKzD,EAU1BZ,KAAK0B,mBAAsBC,IACrB3B,KAAKG,YACPH,KAAK4B,kBAAoB,KACvB5B,KAAKK,SAAWsB,GAIpB3B,KAAKK,SAAWsB,GAQlB3B,KAAK6B,yBAA2B,KAC9B,MAAQjB,MAAOZ,KACf,IAAI8B,EACAC,EAAW/B,KAAKgC,WACpB,MAAMC,EAAiB,MACrBC,OAAI,KACEJ,IACFK,aAAaL,GACbA,OAAUV,GAEPpB,KAAKG,iBACRiC,OACApC,KAAKG,aAAc,GAMrB,MAAMkC,EAAOzB,EAAG0B,wBAGVC,EAAgB3B,EAAG4B,WAAWC,iBAFpBJ,EAAKK,EAAIL,EAAKM,MAAQ,EACtBN,EAAKO,EAAIP,EAAKQ,OAAS,GAEtB,OAAbd,GACFA,EAASe,UAAUC,OAAOC,IAExBT,EAAcU,WAOdV,IAAkBR,IACpBmB,SAEFnB,EAAWQ,EACXA,EAAcO,UAAUK,IAAIH,GAC5BlB,EAAUsB,WAAW,KACnBpD,KAAKG,aAAc,GACnBkD,SAOA,MAAQzB,qBAAsB5B,KAC1B4B,IACFA,IACA5B,KAAK4B,uBAAoBR,GAE3B,MAAMkC,EAAYf,EAAcgB,aAAa,cAM7C,GAAkB,OAAdD,EACF,OAEF,MAAME,EAAQC,SAASH,EAAW,IAC5BI,EAAe1D,KAAKM,MAAMkD,GAC5BE,EAAaC,QAAU3D,KAAK2D,OAC9B3D,KAAK4D,SAASF,EAAaC,QAE5B,UAOPzB,OAAI,KACFtB,EAAGiD,iBAAiB,SAAU5B,GAC9BjC,KAAK8D,sBAAwB,KAC3BlD,EAAGmD,oBAAoB,SAAU9B,OAKzC+B,YAAYC,EAAcC,GACxB,MAAQP,SAAU3D,KAYlB,IADwBiE,EAAaE,KAAMC,GAASA,EAAKT,QAAUA,GAC7C,CAcpB,MAAMU,EAAwBH,EAAcI,UAAWF,GAASA,EAAKT,QAAUA,GAC/E,IAA8B,IAA1BU,EACF,OAiBF,IAAIE,EACJ,QAASC,EAAIH,EAAuBG,GAAK,EAAGA,IAAK,CAC/C,MAAMJ,EAAOH,EAAaO,GAC1B,QAAapD,IAATgD,IAAwC,IAAlBA,EAAKnB,SAAmB,CAChDsB,EAAcH,EACd,OAGJ,GAAIG,EAEF,YADAvE,KAAK4D,SAASW,EAAYZ,MAC1B,EAINc,cACMzE,KAAKI,iBAKPJ,KAAK0E,2BASTC,oBAwBE,IAAIC,qBAvBqBC,IACvB,IAAIC,EAEJ,GAAIxD,EADe,GACZyD,eAAgB,CACrB/E,KAAKI,iBAAkB,EAKvB,MAAM4E,GAAYC,OAAejF,KAAKY,IAAIsE,cAAe,IAAGlC,KAC9C,MAAdgC,GAAsDA,EAAUlC,UAAUC,OAAOC,GACjFhD,KAAK0E,2BACsB,QAA1BI,EAAK9E,KAAKgC,kBAA+B,IAAP8C,GAAyBA,EAAGhC,UAAUK,IAAIH,GAC7EhD,KAAK6B,gCAGL7B,KAAKI,iBAAkB,EACnBJ,KAAK8D,wBACP9D,KAAK8D,wBACL9D,KAAK8D,2BAAwB1C,IAIO,CAAE+D,UAAW,OAASC,QAAQpF,KAAKY,IAC7E,MAAMyE,EAAWrF,KAAKY,GAAG0E,QAAQ,uBAChB,OAAbD,GACFA,EAASxB,iBAAiB,qBAAuBvC,GAAOtB,KAAKqB,gBAAgBC,IAGjFiE,qBACE,IAAIT,EACJ,MAAQ9C,aAAY1B,QAAOF,kBAAiBuD,SAAU3D,KAClDI,IACE4B,EACFhC,KAAK0E,4BAEuB,QAAnBI,EAAKxE,EAAM,UAAuB,IAAPwE,OAAgB,EAASA,EAAGnB,SAAWA,GAQ3E3D,KAAK4D,SAAStD,EAAM,GAAGqD,QAKvBe,2BAA2B,qCAC/B,MAAM3C,EAAWyD,EAAKxD,WAClBD,GACFyD,EAAK/E,uBAAuBsB,GAAU,IAHT,EAGS,CAUpC6B,SAASD,GAAO,qCACpB,MAAQrD,SAAUmF,EAClBA,EAAK9B,MAAQA,EACb,MAAM+B,EAAWpF,EAAM6D,KAAMC,GAASA,EAAKT,QAAUA,IAA2B,IAAlBS,EAAKnB,UAC/DyC,GACFD,EAAKxF,UAAU0F,KAAKD,IALF,EAKEA,CAGpB1D,iBACF,OAAOiD,OAAejF,KAAKY,IAAIsE,cAAe,4BAA2BlF,KAAK2D,2BAEhFiC,SACE,MAAQtF,QAAOC,QAAOF,WAAUG,gBAAiBR,KAC3C6F,GAAOC,OAAW9F,MACxB,OAAQ+F,OAAEC,IAAM,CAAEC,SAAU,EAAGC,OAAOC,OAAmB5F,EAAO,EAC3DsF,IAAO,yBACkBxF,gCACOG,MAC7BuF,OAAE,MAAO,CAAEG,MAAO,iCAAmC,SAAWH,OAAE,MAAO,CAAEG,MAAO,iCAAmC,SAAWH,OAAE,MAAO,CAAEG,MAAO,iCAAmC,QAAW5F,EAAM8F,IAAI,CAAChC,EAAMZ,KAC/MuC,OAAE,SAAU,CAAEE,SAAU,KAAMC,MAAO,CACzC,eAAe,EACf,uBAAwB9B,EAAKnB,WAAY,GACxC,aAAcmB,EAAKT,MAAO,aAAcH,EAAO6C,QAAU/E,IAC1DtB,KAAKS,uBAAuBa,EAAGZ,SAC9BuC,SAAUmB,EAAKnB,UAAYmB,EAAKkC,QACnCP,OAAE,MAAO,CAAEG,MAAO,iCAAmC,SAAWH,OAAE,MAAO,CAAEG,MAAO,iCAAmC,SAAWH,OAAE,MAAO,CAAEG,MAAO,iCAAmC,SAEvLtF,SAAO,OAAO2F,OAAWvG,MAClBwG,sBAAa,MAAO,CAC7BlG,MAAS,CAAC,eACVqD,MAAS,CAAC,kBAGRX,EAAoB,qBAC1BpD,EAAqB6G,MAAQ,CAC3BC,IAtViC,gyCAuVjCC,GArVgC,s1CAqV5BC,uEC7VN,MAAMC,EAAc,CAACC,EAAUlG,IACG,OAAzBA,EAAG0E,QAAQwB,GAKdX,EAAqB,CAAC5F,EAAOwG,IACT,iBAAVxG,GAAsBA,EAAMyG,OAAS,EAC/CC,OAAOC,OAAO,CAAE,aAAa,GAAQ,aAAY3G,MAAU,GAAQwG,GAAeA,EAYlFI,EAAeC,IACnB,MAAMhB,EAAM,GACZiB,MAZoBD,SACJhG,IAAZgG,GACYE,MAAMC,QAAQH,GAAWA,EAAUA,EAAQI,MAAM,MAE5DC,OAAQC,GAAW,MAALA,GACdtB,IAAKsB,GAAMA,EAAEC,QACbF,OAAQC,GAAY,KAANA,GAEZ,GAIPL,CAAaD,GAASQ,QAASF,GAAOtB,EAAIsB,IAAK,GACxCtB,GAEHyB,EAAS,uBACTC,EAAO,yBAAG,UAAOC,EAAKzG,EAAI0G,EAAWC,GACzC,GAAW,MAAPF,GAA0B,MAAXA,EAAI,KAAeF,EAAOK,KAAKH,GAAM,CACtD,MAAMI,EAASC,SAASlD,cAAc,cACtC,GAAIiD,EACF,OAAU,MAAN7G,GACFA,EAAG+G,iBAEEF,EAAOG,KAAKP,EAAKC,EAAWC,GAGvC,OAAO,IAVI","names":["PickerColumnInternal","constructor","hostRef","registerInstance","this","ionChange","createEvent","isScrolling","isColumnVisible","isActive","items","color","numericInput","centerPickerItemInView","target","smooth","el","top","offsetTop","clientHeight","scrollTop","scroll","left","behavior","undefined","inputModeChange","ev","useInputMode","inputModeColumn","detail","setInputModeActive","state","scrollEndCallback","initializeScrollListener","timeout","activeEl","activeItem","scrollCallback","raf","clearTimeout","hapticSelectionStart","bbox","getBoundingClientRect","activeElement","shadowRoot","elementFromPoint","x","width","y","height","classList","remove","PICKER_COL_ACTIVE","disabled","hapticSelectionChanged","add","setTimeout","hapticSelectionEnd","dataIndex","getAttribute","index","parseInt","selectedItem","value","setValue","addEventListener","destroyScrollListener","removeEventListener","itemsChange","currentItems","previousItems","find","item","findPreviousItemIndex","findIndex","nearestItem","i","valueChange","scrollActiveItemIntoView","componentWillLoad","IntersectionObserver","entries","_a","isIntersecting","oldActive","getElementRoot","querySelector","threshold","observe","parentEl","closest","componentDidRender","n","e","findItem","emit","render","mode","getIonMode","h","Host","tabindex","class","createColorClasses","map","onClick","text","getElement","watchers","style","ios","md","pickerColumnInternalMdCss","hostContext","selector","cssClassMap","length","Object","assign","getClassMap","classes","getClassList","Array","isArray","split","filter","c","trim","forEach","SCHEME","openURL","url","direction","animation","test","router","document","preventDefault","push"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-picker-column-internal.entry.js","./node_modules/@ionic/core/dist/esm/theme-7670341c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-1a99aeb7.js';\nimport { b as getIonMode } from './ionic-global-04e268e7.js';\nimport { r as raf, g as getElementRoot } from './helpers-2914b3be.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-683b3b3c.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\n\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\n\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\n\nconst PickerColumnInternal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.isScrolling = false;\n    this.isColumnVisible = false;\n    this.isActive = false;\n    /**\n     * A list of options to be displayed in the picker\n     */\n    this.items = [];\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, tapping the picker will\n     * reveal a number input keyboard that lets\n     * the user type in values for each picker\n     * column. This is useful when working\n     * with time pickers.\n     *\n     * @internal\n     */\n    this.numericInput = false;\n    this.centerPickerItemInView = (target, smooth = true) => {\n      const { el, isColumnVisible } = this;\n      if (isColumnVisible) {\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n        if (el.scrollTop !== top) {\n          el.scroll({\n            top,\n            left: 0,\n            behavior: smooth ? 'smooth' : undefined,\n          });\n        }\n      }\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n    this.inputModeChange = (ev) => {\n      if (!this.numericInput) {\n        return;\n      }\n      const { useInputMode, inputModeColumn } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n      if (!useInputMode || !isColumnActive) {\n        this.setInputModeActive(false);\n        return;\n      }\n      this.setInputModeActive(true);\n    };\n    /**\n     * Setting isActive will cause a re-render.\n     * As a result, we do not want to cause the\n     * re-render mid scroll as this will cause\n     * the picker column to jump back to\n     * whatever value was selected at the\n     * start of the scroll interaction.\n     */\n    this.setInputModeActive = (state) => {\n      if (this.isScrolling) {\n        this.scrollEndCallback = () => {\n          this.isActive = state;\n        };\n        return;\n      }\n      this.isActive = state;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n    this.initializeScrollListener = () => {\n      const { el } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          if (!this.isScrolling) {\n            hapticSelectionStart();\n            this.isScrolling = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + bbox.width / 2;\n          const centerY = bbox.y + bbox.height / 2;\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n          if (activeElement.disabled) {\n            return;\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n          if (activeElement !== activeEl) {\n            hapticSelectionChanged();\n          }\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            this.isScrolling = false;\n            hapticSelectionEnd();\n            /**\n             * Certain tasks (such as those that\n             * cause re-renders) should only be done\n             * once scrolling has finished, otherwise\n             * flickering may occur.\n             */\n            const { scrollEndCallback } = this;\n            if (scrollEndCallback) {\n              scrollEndCallback();\n              this.scrollEndCallback = undefined;\n            }\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n            if (dataIndex === null) {\n              return;\n            }\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n            if (selectedItem.value !== this.value) {\n              this.setValue(selectedItem.value);\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n  }\n  itemsChange(currentItems, previousItems) {\n    const { value } = this;\n    /**\n     * When the items change, it is possible for the item\n     * that was selected to no longer exist. In that case, we need\n     * to automatically select the nearest item. If we do not,\n     * then the scroll position will be reset to zero and it will\n     * look like the first item was automatically selected.\n     *\n     * If we cannot find a closest item then we do nothing, and\n     * the browser will reset the scroll position to 0.\n     */\n    const findCurrentItem = currentItems.find((item) => item.value === value);\n    if (!findCurrentItem) {\n      /**\n       * The default behavior is to assume\n       * that the new set of data is similar to the old\n       * set of data, just with some items filtered out.\n       * We walk backwards through the data to find the\n       * closest enabled picker item and select it.\n       *\n       * Developers can also swap the items out for an entirely\n       * new set of data. In that case, the value we select\n       * here likely will not make much sense. For this use case,\n       * developers should update the `value` prop themselves\n       * when swapping out the data.\n       */\n      const findPreviousItemIndex = previousItems.findIndex((item) => item.value === value);\n      if (findPreviousItemIndex === -1) {\n        return;\n      }\n      /**\n       * Step through the current items backwards\n       * until we find a neighbor we can select.\n       * We start at the last known location of the\n       * current selected item in order to\n       * account for data that has been added. This\n       * search prioritizes stability in that it\n       * tries to keep the scroll position as close\n       * to where it was before the update.\n       * Before Items: ['a', 'b', 'c'], Selected Value: 'b'\n       * After Items:  ['a', 'dog', 'c']\n       * Even though 'dog' is a different item than 'b',\n       * it is the closest item we can select while\n       * preserving the scroll position.\n       */\n      let nearestItem;\n      for (let i = findPreviousItemIndex; i >= 0; i--) {\n        const item = currentItems[i];\n        if (item !== undefined && item.disabled !== true) {\n          nearestItem = item;\n          break;\n        }\n      }\n      if (nearestItem) {\n        this.setValue(nearestItem.value);\n        return;\n      }\n    }\n  }\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view when the picker column\n       * is actively visible to the user.\n       */\n      this.scrollActiveItemIntoView();\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n  componentWillLoad() {\n    const visibleCallback = (entries) => {\n      var _a;\n      const ev = entries[0];\n      if (ev.isIntersecting) {\n        this.isColumnVisible = true;\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n      }\n      else {\n        this.isColumnVisible = false;\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n      }\n    };\n    new IntersectionObserver(visibleCallback, { threshold: 0.001 }).observe(this.el);\n    const parentEl = this.el.closest('ion-picker-internal');\n    if (parentEl !== null) {\n      parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n    }\n  }\n  componentDidRender() {\n    var _a;\n    const { activeItem, items, isColumnVisible, value } = this;\n    if (isColumnVisible) {\n      if (activeItem) {\n        this.scrollActiveItemIntoView();\n      }\n      else if (((_a = items[0]) === null || _a === void 0 ? void 0 : _a.value) !== value) {\n        /**\n         * If the picker column does not have an active item and the current value\n         * does not match the first item in the picker column, that means\n         * the value is out of bounds. In this case, we assign the value to the\n         * first item to match the scroll position of the column.\n         *\n         */\n        this.setValue(items[0].value);\n      }\n    }\n  }\n  /** @internal  */\n  async scrollActiveItemIntoView() {\n    const activeEl = this.activeItem;\n    if (activeEl) {\n      this.centerPickerItemInView(activeEl, false);\n    }\n  }\n  /**\n   * Sets the value prop and fires the ionChange event.\n   * This is used when we need to fire ionChange from\n   * user-generated events that cannot be caught with normal\n   * input/change event listeners.\n   * @internal\n   */\n  async setValue(value) {\n    const { items } = this;\n    this.value = value;\n    const findItem = items.find((item) => item.value === value && item.disabled !== true);\n    if (findItem) {\n      this.ionChange.emit(findItem);\n    }\n  }\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]:not([disabled])`);\n  }\n  render() {\n    const { items, color, isActive, numericInput } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { tabindex: 0, class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput,\n      }) }, h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), items.map((item, index) => {\n      return (h(\"button\", { tabindex: \"-1\", class: {\n          'picker-item': true,\n          'picker-item-disabled': item.disabled || false,\n        }, \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n          this.centerPickerItemInView(ev.target);\n        }, disabled: item.disabled }, item.text));\n    }), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\" }, \"\\u00A0\")));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"items\": [\"itemsChange\"],\n    \"value\": [\"valueChange\"]\n  }; }\n};\nconst PICKER_COL_ACTIVE = 'picker-item-active';\nPickerColumnInternal.style = {\n  ios: pickerColumnInternalIosCss,\n  md: pickerColumnInternalMdCss\n};\n\nexport { PickerColumnInternal as ion_picker_column_internal };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return typeof color === 'string' && color.length > 0\n    ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter((c) => c != null)\n      .map((c) => c.trim())\n      .filter((c) => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach((c) => (map[c] = true));\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"]}