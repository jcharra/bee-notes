{"version":3,"file":"default-src_app_services_reminder_service_ts-src_app_services_swarm-group_service_ts-src_app_-104507.efe05bfcb0ce7ee6.js","mappings":"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","names":["LocalNotifications","registerPlugin","web","t","then","m","LocalNotificationsWeb","dirtyDate","dirtyDateToCompare","requiredArgs","arguments","date","toDate","dateToCompare","getTime","dirtyAmount","amount","toInteger","isNaN","Date","NaN","setDate","getDate","ReminderService","constructor","translate","db","authService","storageSync","this","getReminders","swarmId","console","log","getUser","pipe","switchMap","user","from","getFromStorage","LocalStorageKey","localReminders","of","listVal","ref","uid","keyField","first","map","rs","reminders","i","length","item","push","Object","obsoleteReminders","currentReminders","r","isBefore","startOfDay","addDays","cleanupReminders","reminderId","filteredReminders","filter","writeToStorage","updateReminder","reminder","deleteReminder","createReminder","Math","floor","random","notifications","title","swarmName","instant","groupName","body","text","id","schedule","at","extra","tap","set","toISOString","subscribe","_markStorageAsDirty","remove","reminderIds","rid","clearFromStorage","i0","factory","SwarmGroupService","geolocation","getGroups","localGroups","take","data","entries","_entryFromFbValue","getGroup","groupId","objectVal","createGroup","name","swarmIds","updateGroup","group","update","addSwarmToGroup","g","newSwarmIds","concat","deleteGroup","gid","setLocation","getCurrentPosition","resp","swarms","s","lat","round","coords","latitude","lng","longitude","entry","ActivityStatus","SwarmService","getSwarms","ignoreStatuses","localResult","created","indexOf","activityStatus","swarmData","writeSwarmsToStorage","getSwarm","localSwarms","swarmForId","ancestorId","isNucleus","about","createSwarm","__awaiter","swarm","res","pathParts","_path","pieces_","updateSwarm","markAsDeceased","deactivate","markAsSold","markAsDissolved","getFormerSwarms","reactivate","status","c","clearStorage","required","args","TypeError","dirtyNumber","number","Number","ceil","setHours","obj","_typeof","Symbol","iterator","prototype","argument","argStr","toString","call","warn","Error","stack"],"sourceRoot":"webpack:///","sources":["./node_modules/@capacitor/local-notifications/dist/esm/index.js","./node_modules/date-fns/esm/isBefore/index.js","./node_modules/date-fns/esm/addDays/index.js","./src/app/services/reminder.service.ts","./src/app/services/swarm-group.service.ts","./src/app/types/Swarm.ts","./src/app/services/swarm.service.ts","./node_modules/date-fns/esm/_lib/requiredArgs/index.js","./node_modules/date-fns/esm/_lib/toInteger/index.js","./node_modules/date-fns/esm/startOfDay/index.js","./node_modules/date-fns/esm/toDate/index.js"],"sourcesContent":["import { registerPlugin } from '@capacitor/core';\nconst LocalNotifications = registerPlugin('LocalNotifications', {\n    web: () => import('./web').then(m => new m.LocalNotificationsWeb()),\n});\nexport * from './definitions';\nexport { LocalNotifications };\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import { Injectable } from \"@angular/core\";\nimport { Database, listVal, remove, set } from \"@angular/fire/database\";\nimport { LocalNotifications } from \"@capacitor/local-notifications\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { addDays, isBefore, startOfDay } from \"date-fns\";\nimport { ref } from \"firebase/database\";\nimport { from, of } from \"rxjs\";\nimport { first, map, switchMap, tap } from \"rxjs/operators\";\nimport { AuthService } from \"../pages/auth/auth.service\";\nimport { LocalStorageKey, StorageSyncService } from \"./storage-sync.service\";\nexport interface Reminder {\n  reminderId?: number;\n  swarmId?: string;\n  groupId?: string;\n  groupName?: string;\n  swarmName?: string;\n  date: Date;\n  text: string;\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ReminderService {\n  constructor(\n    private translate: TranslateService,\n    private db: Database,\n    private authService: AuthService,\n    private storageSync: StorageSyncService\n  ) {}\n\n  getReminders(swarmId?: string) {\n    console.log(\"Fetch for swarm\", swarmId);\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        return from(this.storageSync.getFromStorage(LocalStorageKey.REMINDERS, swarmId)).pipe(\n          switchMap((localReminders) => {\n            if (localReminders) {\n              return of(localReminders);\n            } else {\n              return listVal(ref(this.db, `users/${user.uid}/reminders`), {\n                keyField: \"id\",\n              }).pipe(\n                first(),\n                map((rs: any[]) => {\n                  let reminders: Reminder[] = [];\n\n                  for (let i = 0; i < rs.length; i++) {\n                    const item: any = rs[i];\n                    reminders.push({\n                      ...item,\n                      date: new Date(item.date),\n                    });\n                  }\n\n                  // Show reminders if not older than 3 days\n                  const obsoleteReminders = [];\n                  const currentReminders = [];\n\n                  for (const r of reminders) {\n                    if (isBefore(r.date, startOfDay(addDays(new Date(), -3)))) {\n                      obsoleteReminders.push(r);\n                    } else {\n                      currentReminders.push(r);\n                    }\n                  }\n\n                  this.cleanupReminders(obsoleteReminders.map((r) => r.reminderId));\n\n                  const filteredReminders = swarmId\n                    ? currentReminders.filter((r) => r.swarmId === swarmId)\n                    : currentReminders.filter((r) => !r.swarmId);\n\n                  this.storageSync.writeToStorage(LocalStorageKey.REMINDERS, filteredReminders, swarmId);\n\n                  return filteredReminders;\n                })\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  async updateReminder(reminder: Reminder) {\n    await this.deleteReminder({ ...reminder });\n    await this.createReminder({ ...reminder }); // will create a new reminder ID\n  }\n\n  async createReminder(reminder: Reminder) {\n    await LocalNotifications.requestPermissions();\n\n    reminder.reminderId = Math.floor(Math.random() * 1000000000);\n\n    await LocalNotifications.schedule({\n      notifications: [\n        {\n          title: reminder.swarmName\n            ? this.translate.instant(\"REMINDERS.title\", {\n                swarmName: reminder.swarmName,\n              })\n            : this.translate.instant(\"REMINDERS.titleForGroup\", {\n                groupName: reminder.groupName,\n              }),\n          body: reminder.text,\n          id: reminder.reminderId,\n          schedule: { at: new Date(reminder.date) },\n          extra: {\n            swarmId: reminder.swarmId,\n          },\n        },\n      ],\n    });\n\n    this.authService\n      .getUser()\n      .pipe(\n        first(),\n        tap((user) => {\n          set(ref(this.db, `users/${user.uid}/reminders/${reminder.reminderId}`), {\n            ...reminder,\n            date: reminder.date.toISOString(),\n          });\n        })\n      )\n      .subscribe();\n\n    this._markStorageAsDirty(reminder.swarmId);\n  }\n\n  async deleteReminder(reminder: Reminder) {\n    console.log(\"Delete\", reminder.reminderId);\n    await LocalNotifications.cancel({\n      notifications: [{ id: reminder.reminderId }],\n    });\n\n    this.authService\n      .getUser()\n      .pipe(\n        first(),\n        tap((user) => {\n          remove(ref(this.db, `/users/${user.uid}/reminders/${reminder.reminderId}`));\n          console.log(\"Remove from firebase\", reminder.reminderId);\n        })\n      )\n      .subscribe();\n\n    this._markStorageAsDirty(reminder.swarmId);\n  }\n\n  cleanupReminders(reminderIds: number[]) {\n    this.authService\n      .getUser()\n      .pipe(\n        first(),\n        tap((user) => {\n          for (const rid of reminderIds) {\n            remove(ref(this.db, `/users/${user.uid}/reminders/${rid}`));\n          }\n        })\n      )\n      .subscribe();\n  }\n\n  private _markStorageAsDirty(swarmId?: string): Promise<any> {\n    console.log(\"Clear reminders from local storage for swarm\", swarmId);\n    return this.storageSync.clearFromStorage(LocalStorageKey.REMINDERS, swarmId);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Database, listVal, objectVal, remove } from \"@angular/fire/database\";\nimport { Geolocation } from \"@ionic-native/geolocation/ngx\";\nimport { push, ref, update } from \"firebase/database\";\nimport { from, of } from \"rxjs\";\nimport { map, switchMap, take } from \"rxjs/operators\";\nimport { AuthService } from \"../pages/auth/auth.service\";\nimport { UISwarmGroup } from \"../pages/swarms/swarms.page\";\nimport { LocalStorageKey, StorageSyncService } from \"./storage-sync.service\";\n\nexport interface SwarmGroup {\n  id: string;\n  name: string;\n  swarmIds: string[];\n  lat?: number;\n  lng?: number;\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SwarmGroupService {\n  constructor(\n    private db: Database,\n    private authService: AuthService,\n    private geolocation: Geolocation,\n    private storageSync: StorageSyncService\n  ) {}\n\n  getGroups() {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        return from(this.storageSync.getFromStorage(LocalStorageKey.GROUPS)).pipe(\n          switchMap((localGroups) => {\n            if (localGroups) {\n              return of(localGroups);\n            } else {\n              return listVal(ref(this.db, `/users/${user.uid}/groups`), {\n                keyField: \"id\",\n              }).pipe(\n                take(1),\n                map((data: any[]) => {\n                  if (!data) {\n                    return [];\n                  }\n\n                  const entries: SwarmGroup[] = [];\n                  for (let i = 0; i < data.length; i++) {\n                    const item: any = data[i];\n                    entries.push(this._entryFromFbValue(item));\n                  }\n\n                  this.storageSync.writeToStorage(LocalStorageKey.GROUPS, entries);\n\n                  return entries;\n                })\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  getGroup(groupId: string) {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        return objectVal(ref(this.db, `/users/${user.uid}/groups/${groupId}`), {\n          keyField: \"id\",\n        }).pipe(\n          take(1),\n          map((data: any) => {\n            if (!data) {\n              return null;\n            }\n\n            return this._entryFromFbValue(data);\n          })\n        );\n      })\n    );\n  }\n\n  createGroup(name: string, swarmIds: string[] = []) {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        this._markStorageAsDirty();\n        return push(ref(this.db, `/users/${user.uid}/groups`), {\n          name,\n          swarmIds,\n        });\n      })\n    );\n  }\n\n  updateGroup(group: SwarmGroup) {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        this._markStorageAsDirty();\n        return update(ref(this.db, `/users/${user.uid}/groups/${group.id}`), group);\n      })\n    );\n  }\n\n  addSwarmToGroup(swarmId: string, groupId: string) {\n    return this.getGroup(groupId).pipe(\n      switchMap((g: SwarmGroup) => {\n        this._markStorageAsDirty();\n        if (!g) {\n          return;\n        }\n\n        const newSwarmIds = (g.swarmIds || []).concat(swarmId);\n        return this.updateGroup({\n          id: g.id,\n          name: g.name,\n          swarmIds: newSwarmIds,\n        });\n      })\n    );\n  }\n\n  deleteGroup(gid: string) {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        this._markStorageAsDirty();\n        return remove(ref(this.db, `/users/${user.uid}/groups/${gid}`));\n      })\n    );\n  }\n\n  setLocation(group: UISwarmGroup) {\n    return this.geolocation.getCurrentPosition().then((resp) => {\n      return this.updateGroup({\n        id: group.id,\n        name: group.name,\n        swarmIds: group.swarms.map((s) => s.id),\n        lat: Math.round(resp.coords.latitude * 1000) / 1000,\n        lng: Math.round(resp.coords.longitude * 1000) / 1000,\n        //lat: Math.random() * 90 - 45,\n        //lng: Math.random() * 90 - 45,\n      }).subscribe();\n    });\n  }\n\n  private _entryFromFbValue(data: any) {\n    let entry: SwarmGroup = {\n      ...data,\n    };\n\n    if (data.lat) {\n      entry.lat = data.lat;\n    }\n\n    if (data.lng) {\n      entry.lng = data.lng;\n    }\n\n    return entry;\n  }\n\n  private _markStorageAsDirty(): Promise<any> {\n    return this.storageSync.clearFromStorage(LocalStorageKey.GROUPS);\n  }\n}\n","import { ColonyStatusInfo } from \"./ColonyStatus\";\nimport { JournalEntry } from \"./JournalEntry\";\n\nexport enum ActivityStatus {\n  ACTIVE = \"ACTIVE\",\n  DECEASED = \"DECEASED\",\n  SOLD = \"SOLD\",\n  DISSOLVED = \"DISSOLVED\",\n}\n\nexport interface Swarm {\n  id?: string;\n  name: string;\n  created: Date;\n  statusInfo?: ColonyStatusInfo;\n  lastAction?: JournalEntry;\n  activityStatus?: ActivityStatus;\n  ancestorId?: string; // id of ancestor\n  isNucleus?: boolean;\n  about?: string;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Database, listVal, objectVal } from \"@angular/fire/database\";\nimport { push, ref, update } from \"firebase/database\";\nimport { from, Observable, of } from \"rxjs\";\nimport { map, switchMap, take } from \"rxjs/operators\";\nimport { AuthService } from \"../pages/auth/auth.service\";\nimport { ActivityStatus, Swarm } from \"../types/Swarm\";\nimport { LocalStorageKey, StorageSyncService } from \"./storage-sync.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SwarmService {\n  constructor(private db: Database, private authService: AuthService, private storageSync: StorageSyncService) {}\n\n  getSwarms(\n    ignoreStatuses: ActivityStatus[] = [ActivityStatus.SOLD, ActivityStatus.DECEASED, ActivityStatus.DISSOLVED]\n  ) {\n    return this.authService.getUser().pipe(\n      switchMap((user) => {\n        console.log(\"User\", user.uid);\n        return from(this.storageSync.getFromStorage(LocalStorageKey.SWARMS)).pipe(\n          switchMap((localResult) => {\n            if (localResult) {\n              return of(localResult).pipe(\n                take(1),\n                map((swarms: Swarm[]) => {\n                  return swarms\n                    .map((s) => {\n                      return { ...s, created: new Date(s.created) };\n                    })\n                    .filter((s) => ignoreStatuses.indexOf(s.activityStatus) === -1);\n                })\n              );\n            } else {\n              return listVal(ref(this.db, `users/${user.uid}/swarms`), {\n                keyField: \"id\",\n              }).pipe(\n                take(1),\n                map((swarmData: any[]) => {\n                  const swarms: Swarm[] = [];\n\n                  for (let i = 0; i < swarmData.length; i++) {\n                    const item: any = swarmData[i];\n\n                    swarms.push({\n                      ...item,\n                      created: new Date(item.created),\n                    });\n                  }\n\n                  this.writeSwarmsToStorage(swarms);\n\n                  return swarms.filter((s) => ignoreStatuses.indexOf(s.activityStatus) === -1);\n                })\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  getSwarm(swarmId: string): Observable<Swarm> {\n    return from(this.storageSync.getFromStorage(LocalStorageKey.SWARMS)).pipe(\n      switchMap((localSwarms) => {\n        const swarmForId = localSwarms ? localSwarms.filter((s) => s.id === swarmId)[0] : null;\n        if (swarmForId) {\n          return of(swarmForId);\n        } else {\n          return this.authService.getUser().pipe(\n            switchMap((user) => {\n              return objectVal(ref(this.db, `users/${user.uid}/swarms/${swarmId}`), {\n                keyField: \"id\",\n              }).pipe(\n                take(1),\n                map((s: any) => {\n                  return {\n                    id: swarmId,\n                    name: s.name,\n                    created: new Date(s.created),\n                    activityStatus: s.activityStatus,\n                    ancestorId: s.ancestorId,\n                    isNucleus: s.isNucleus,\n                    about: s.about,\n                  };\n                })\n              );\n            })\n          );\n        }\n      })\n    );\n  }\n\n  createSwarm(\n    name: string,\n    ancestorId: string = null,\n    isNucleus: boolean = false,\n    about: string = \"\"\n  ): Observable<any> {\n    return this.authService.getUser().pipe(\n      switchMap(async (user) => {\n        await this._markStorageAsDirty();\n\n        const swarm = {\n          name,\n          created: new Date().toISOString(),\n          activityStatus: ActivityStatus.ACTIVE,\n          ancestorId,\n          isNucleus,\n          about,\n        };\n\n        return push(ref(this.db, `/users/${user.uid}/swarms`), swarm).then((res: any) => {\n          const pathParts = res._path.pieces_;\n          return pathParts[pathParts.length - 1];\n        });\n      })\n    );\n  }\n\n  updateSwarm(s: Swarm) {\n    return this.authService.getUser().pipe(\n      map(async (user) => {\n        await this._markStorageAsDirty();\n        update(ref(this.db, `/users/${user.uid}/swarms/${s.id}`), s);\n      })\n    );\n  }\n\n  markAsDeceased(s: Swarm): Observable<any> {\n    return this.deactivate(s, ActivityStatus.DECEASED);\n  }\n\n  markAsSold(s: Swarm) {\n    return this.deactivate(s, ActivityStatus.SOLD);\n  }\n\n  markAsDissolved(s: Swarm) {\n    return this.deactivate(s, ActivityStatus.DISSOLVED);\n  }\n\n  getFormerSwarms(): Observable<Swarm[]> {\n    return this.getSwarms([ActivityStatus.ACTIVE]);\n  }\n\n  reactivate(s: Swarm) {\n    return this.authService.getUser().pipe(\n      switchMap(async (user) => {\n        await this._markStorageAsDirty();\n        return update(ref(this.db, `/users/${user.uid}/swarms/${s.id}`), {\n          activityStatus: ActivityStatus.ACTIVE,\n        });\n      })\n    );\n  }\n\n  private deactivate(s: Swarm, status: ActivityStatus) {\n    return this.authService.getUser().pipe(\n      switchMap(async (user) => {\n        await this._markStorageAsDirty();\n        return update(ref(this.db, `/users/${user.uid}/swarms/${s.id}`), {\n          activityStatus: status,\n        });\n      })\n    );\n  }\n\n  private writeSwarmsToStorage(swarms: Swarm[]) {\n    this.storageSync.writeToStorage(\n      LocalStorageKey.SWARMS,\n      swarms.map((s) => {\n        let date = null;\n        try {\n          date = new Date(s.created).toISOString();\n        } catch {}\n\n        return { ...s, created: date };\n      })\n    );\n  }\n\n  private _markStorageAsDirty(): Promise<any> {\n    return this.storageSync.clearStorage();\n  }\n}\n","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}"]}