{"version":3,"file":"src_app_pages_reminder_reminder_module_ts.122ff5d239719609.js","mappings":"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","names":["MILLISECONDS_IN_HOUR","i0","ctx_r4","oxw","routes","path","component","constructor","reminderService","swarmService","groupService","translate","toastController","route","navCtrl","this","Date","toISOString","dirtyDate","requiredArgs","arguments","date","toDate","year","getFullYear","setFullYear","setHours","endOfYear","addYears","ionViewWillEnter","swarmId","snapshot","queryParams","groupId","reminderId","getSwarm","pipe","first","subscribe","s","swarmName","name","getGroup","g","groupName","getReminders","tap","rems","rem","find","r","setDateTime","text","setMinutes","startOfHour","dirtyAmount","amount","toInteger","addMilliseconds","addHours","save","reminder","trim","isoDate","updateReminder","Object","then","onReminderSaved","err","onReminderCreationFailed","createReminder","d","datePart","format","timePart","console","log","create","message","instant","duration","present","back","error","ReminderPage","selectors","ctx","ReminderPageRoutingModule","RouterModule","ReminderPageModule","CommonModule","FormsModule","IonicModule","TranslateModule"],"sourceRoot":"webpack:///","sources":["./node_modules/date-fns/esm/addHours/index.js","./src/app/pages/reminder/reminder.page.html","./src/app/pages/reminder/reminder-routing.module.ts","./src/app/pages/reminder/reminder.page.ts","./node_modules/date-fns/esm/endOfYear/index.js","./node_modules/date-fns/esm/startOfHour/index.js","./src/app/pages/reminder/reminder.module.ts"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nexport default function addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}","<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button [routerLink]=\"swarmId ? '/swarms/view/' + swarmId : '/swarms'\">\n        <ion-icon name=\"arrow-back-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-title\n      ><strong\n        >{{ (this.reminderId ? 'REMINDERS.pageTitleEdit' : 'REMINDERS.pageTitle') | translate }}</strong\n      ></ion-title\n    >\n  </ion-toolbar>\n</ion-header>\n<ion-content>\n  <ion-list [inset]=\"true\" mode=\"ios\">\n    <ion-item *ngIf=\"groupName\">\n      {{'REMINDERS.targetLocation' | translate}}:&nbsp; <strong>{{groupName}}</strong>\n    </ion-item>\n    <ion-item *ngIf=\"swarmName\">\n      {{'REMINDERS.targetColony' | translate}}:&nbsp; <strong>{{swarmName}}</strong>\n    </ion-item>\n  </ion-list>\n  <ion-list [inset]=\"true\" mode=\"ios\">\n    <ion-item>\n      <ion-label id=\"date\">\n        <span [translate]=\"'REMINDERS.datetimePattern'\" [translateParams]=\"{date: datePart, time: timePart}\"></span>\n        <ion-icon class=\"ion-float-right\" name=\"create-outline\" size=\"small\"></ion-icon>\n      </ion-label>\n      <ion-popover trigger=\"date\" size=\"cover\">\n        <ng-template>\n          <ion-datetime\n            #popoverDate\n            (ionChange)=\"setDateTime(popoverDate.value)\"\n            presentation=\"date-time\"\n            locale=\"de-DE\"\n            max=\"{{ maxDate }}\"\n            min=\"{{ minDate }}\"\n          ></ion-datetime>\n        </ng-template>\n      </ion-popover>\n    </ion-item>\n    <ion-item>\n      <ion-textarea [(ngModel)]=\"text\" rows=\"3\" placeholder=\"{{'REMINDERS.textPlaceholder' | translate}}\">\n      </ion-textarea>\n    </ion-item>\n  </ion-list>\n  <div class=\"controls-container\">\n    <ion-button class=\"ion-padding-horizontal\" [disabled]=\"!text ||Â !text.trim()\" type=\"submit\" (click)=\"save()\">\n      {{ 'GENERAL.save' | translate }}\n    </ion-button>\n  </div>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ReminderPage } from './reminder.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ReminderPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ReminderPageRoutingModule {}\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { NavController, ToastController } from \"@ionic/angular\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { addHours, addYears, endOfYear, format, startOfHour } from \"date-fns\";\nimport { first, tap } from \"rxjs/operators\";\nimport { Reminder, ReminderService } from \"src/app/services/reminder.service\";\nimport { SwarmGroup, SwarmGroupService } from \"src/app/services/swarm-group.service\";\nimport { SwarmService } from \"src/app/services/swarm.service\";\nimport { Swarm } from \"src/app/types/Swarm\";\n\n@Component({\n  selector: \"app-reminder\",\n  templateUrl: \"./reminder.page.html\",\n  styleUrls: [\"./reminder.page.scss\"],\n})\nexport class ReminderPage {\n  swarmId: string;\n  groupId: string;\n  swarmName: string;\n  groupName: string;\n  reminderId: number;\n  isoDate: string;\n  datePart: string;\n  timePart: string;\n  minDate = new Date().toISOString();\n  maxDate = endOfYear(addYears(new Date(), 1)).toISOString();\n  text: string;\n\n  constructor(\n    private reminderService: ReminderService,\n    private swarmService: SwarmService,\n    private groupService: SwarmGroupService,\n    private translate: TranslateService,\n    private toastController: ToastController,\n    private route: ActivatedRoute,\n    private navCtrl: NavController\n  ) {}\n\n  ionViewWillEnter() {\n    this.swarmId = this.route.snapshot.queryParams.swarmId;\n    this.groupId = this.route.snapshot.queryParams.groupId;\n    this.reminderId = this.route.snapshot.queryParams.reminderId;\n\n    if (this.swarmId) {\n      this.swarmService\n        .getSwarm(this.swarmId)\n        .pipe(first())\n        .subscribe((s: Swarm) => {\n          this.swarmName = s.name;\n        });\n    } else {\n      this.swarmName = \"\";\n    }\n\n    if (this.groupId) {\n      this.groupService\n        .getGroup(this.groupId)\n        .pipe(first())\n        .subscribe((g: SwarmGroup) => {\n          this.groupName = g.name;\n        });\n    } else {\n      this.groupName = \"\";\n    }\n\n    if (this.reminderId) {\n      this.reminderService\n        .getReminders(this.swarmId)\n        .pipe(\n          first(),\n          tap((rems: Reminder[]) => {\n            const rem = rems.find((r) => r.reminderId === +this.reminderId);\n            if (rem) {\n              this.setDateTime(rem.date.toISOString());\n              this.text = rem.text;\n              this.groupId = rem.groupId;\n              this.swarmId = rem.swarmId;\n              this.swarmName = rem.swarmName;\n              this.groupName = rem.groupName;\n            }\n          })\n        )\n        .subscribe();\n    } else {\n      this.setDateTime(startOfHour(addHours(new Date(), 1)).toISOString());\n    }\n  }\n\n  save() {\n    const reminder = {\n      swarmId: this.swarmId || \"\",\n      groupId: this.groupId || \"\",\n      swarmName: this.swarmName || \"\",\n      groupName: this.groupName || \"\",\n      text: this.text.trim(),\n      date: new Date(this.isoDate),\n    };\n\n    if (this.reminderId) {\n      this.reminderService\n        .updateReminder({\n          reminderId: this.reminderId,\n          ...reminder,\n        })\n        .then(\n          () => this.onReminderSaved(new Date(this.isoDate)),\n          (err) => this.onReminderCreationFailed(err)\n        );\n    } else {\n      this.reminderService.createReminder(reminder).then(\n        () => this.onReminderSaved(new Date(this.isoDate)),\n        (err) => this.onReminderCreationFailed(err)\n      );\n    }\n  }\n\n  setDateTime(d: string | string[]) {\n    this.isoDate = typeof d === \"string\" ? d : d[0];\n    const date = new Date(typeof d === \"string\" ? d : d[0]);\n    this.datePart = format(date, \"dd.MM.yyyy\");\n    this.timePart = format(date, \"HH:mm\");\n    console.log(\"Date:\", this.isoDate, \" Datepart:\", this.datePart, \" Time:\", this.timePart);\n  }\n\n  async onReminderSaved(date: Date) {\n    const toast = await this.toastController.create({\n      message: this.translate.instant(\"JOURNAL_PAGE.onReminderSuccess\", {\n        date: format(date, \"yyyy-MM-dd\"),\n      }),\n      duration: 2000,\n    });\n    toast.present();\n    this.navCtrl.back();\n  }\n\n  async onReminderCreationFailed(err) {\n    const toast = await this.toastController.create({\n      message: this.translate.instant(\"JOURNAL_PAGE.onReminderFailure\", {\n        error: err,\n      }),\n      duration: 4000,\n    });\n    toast.present();\n  }\n}\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\n\nexport default function endOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import { TranslateModule } from '@ngx-translate/core';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ReminderPageRoutingModule } from './reminder-routing.module';\n\nimport { ReminderPage } from './reminder.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReminderPageRoutingModule,\n    TranslateModule\n  ],\n  declarations: [ReminderPage]\n})\nexport class ReminderPageModule {}\n"]}